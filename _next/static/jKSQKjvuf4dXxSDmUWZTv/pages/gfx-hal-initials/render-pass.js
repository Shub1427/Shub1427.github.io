(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"0Hkh":function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n("Q88C"),r={"rust-cargo-basics":{key:"rust-cargo-basics",link:"/rust-reference/rust-cargo-basics",title:"Basics on Rust & Cargo",titleString:"Basics on Rust & Cargo",description:"Basics on Rust & Cargo",ogImage:"https://user-images.githubusercontent.com/11786283/81770497-0c77c000-94fe-11ea-95bc-44e5e432b1d8.jpg",tags:[a.a.RUST],createdAt:new Date("2020/04/26 22:00:00"),updatedAt:new Date("2020/04/26 22:00:00"),isPublished:!0},"rust-smart-pointers":{key:"rust-smart-pointers",link:"/rust-reference/rust-smart-pointers",title:"Smart Pointers",titleString:"Smart Pointers",description:"Some notes on Box<>, Rc<>, RefCell<> etc.",ogImage:"https://user-images.githubusercontent.com/11786283/81770497-0c77c000-94fe-11ea-95bc-44e5e432b1d8.jpg",tags:[a.a.RUST],createdAt:new Date("2020/05/22 17:45:00"),updatedAt:new Date("2020/05/22 17:45:00"),isPublished:!0}}},"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n("q1tI"),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"===typeof e?e(t):o({},t,{},e)),n},d=function(e){var t=u(e.components);return(r.a.createElement(l.Provider,{value:t},e.children))},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},f=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,f=d["".concat(s,".").concat(p)]||d[p]||g[p]||i;return n?r.a.createElement(f,o({ref:t},l,{components:n})):r.a.createElement(f,o({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var i=n.length,s=new Array(i);s[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"===typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},"EJ+/":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/gfx-hal-initials/render-pass",function(){return n("ez2w")}])},Q88C:function(e,t,n){"use strict";var a;n.d(t,"a",(function(){return a})),function(e){e.TUTORIAL="tutorial",e.PROJECT="project",e.RESEARCH="research",e.RUST="rust",e.JS="javascript",e.REACT="reactjs",e.GFX_HAL="gfx-hal"}(a||(a={}))},RYGM:function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return l}));var a=n("q1tI"),r=n.n(a),i=n("Q88C"),s=n("Swb2"),o=r.a.createElement,c={"rust-reference":{key:"rust-reference",link:"/rust-reference",title:"Advance Rust Reference",titleString:"Advance Rust Reference",description:"Some advance concepts in Rust that were difficult for me to understand.       This Doc is trying to keep a reference of all those topics, for me to take       a reference from later for easier understanding",ogImage:"https://user-images.githubusercontent.com/11786283/82665354-47da6300-9c51-11ea-87c7-bb996eb79de1.jpg",tags:[i.a.RUST],createdAt:new Date("2020/05/22 17:25:00"),updatedAt:new Date("2020/05/22 17:25:00"),isPublished:!0},"performance-reactjs":{key:"performance-reactjs",link:"/performance-reactjs",title:"Performance Improvements in JS and ReactJS",titleString:"Performance Improvements in JS and ReactJS",description:"Recent Performance related findings of mine, which I am jotting down here for later reference",ogImage:"https://user-images.githubusercontent.com/11786283/81769128-6f675800-94fa-11ea-99d6-57dc42166eaa.jpg",tags:[i.a.RESEARCH,i.a.JS,i.a.REACT],createdAt:new Date("2020/05/07 09:15:00"),updatedAt:new Date("2020/05/09 23:15:00"),isPublished:!0},"upload-client-logs":{key:"upload-client-logs",link:"/upload-client-logs",title:"Client Browser Log to your Server",titleString:"Client Browser Log to your Server",description:"Sometimes (like to get details on performance) there is a requirement to log data       from end-user's browser to you own servers, for which this note will talk about.",ogImage:"https://user-images.githubusercontent.com/11786283/81769041-37601500-94fa-11ea-98f7-f353dca53e6b.jpg",tags:[i.a.PROJECT,i.a.JS,i.a.REACT],createdAt:new Date("2020/04/29 08:30:00"),updatedAt:new Date("2020/05/09 12:30:00"),isPublished:!0},"word-counter":{key:"word-counter",link:"/word-counter",title:"Word Counter in Rust",titleString:"Word Counter in Rust",description:"Just a fun bin script for my project, to count words in my MDX files.",ogImage:"https://user-images.githubusercontent.com/11786283/81768977-fd8f0e80-94f9-11ea-8425-953f8639d80e.jpg",tags:[i.a.PROJECT,i.a.RUST],createdAt:new Date("2020/04/26 22:00:00"),updatedAt:new Date("2020/04/26 22:00:00"),isPublished:!0},"gfx-hal-basics":{key:"gfx-hal-basics",link:"/gfx-hal-initials",title:o("span",null,"Learn to Draw a Cube using\xa0",o(s.a,null,"gfx-hal")),titleString:"Learn to Draw a Cube using gfx-hal",description:"Learn to draw a cube using gfx-hal. Also understand       concepts of Vulkan while learning to draw a cube",ogImage:"https://user-images.githubusercontent.com/11786283/81768708-514d2800-94f9-11ea-95d3-36796815a31f.jpg",tags:[i.a.TUTORIAL,i.a.RUST],createdAt:new Date("2020/04/26 10:00:00"),updatedAt:new Date("2020/04/26 16:00:00"),isPublished:!0},"astro-v2":{key:"astro-v2",link:"/astro-v2",title:"Astro Blaster v2 in Rust",titleString:"Astro Blaster v2 in Rust",description:"A very minimal game making tutorial in Rust using ggez",ogImage:"https://user-images.githubusercontent.com/11786283/81768159-f1a24d00-94f7-11ea-83e3-8b9212d4851c.jpg",tags:[i.a.TUTORIAL,i.a.RUST],createdAt:new Date("2020/04/10"),updatedAt:new Date("2020/04/12"),isPublished:!0}},l=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){return Object.prototype.hasOwnProperty.call(e,n)&&t.push(e[n]),t}),[])}(c)},ez2w:function(e,t,n){"use strict";n.r(t),n.d(t,"record",(function(){return l})),n.d(t,"prevRecord",(function(){return u})),n.d(t,"default",(function(){return y}));var a=n("wx14"),r=n("Ff2n"),i=n("q1tI"),s=n.n(i),o=n("7ljp"),c=n("rFFW"),l=(n("RYGM"),n("0Hkh"),s.a.createElement,c.a["render-pass"]),u=c.a["swap-chain"],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",t)}},p=d("PolkaContainer"),g=d("H1"),f=d("Blockquote"),m=d("Link"),h=d("MoveOtherPage"),b={record:l,prevRecord:u},w="wrapper";function y(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)(w,Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)(p,{pageTitle:l.title,pageTitleString:l.titleString,pageDescription:l.description,keywords:["Vulkan","Basics","Render Pass","Beginner","gfx-hal"],publishDate:l.createdAt,ogImage:l.ogImage,mdxType:"PolkaContainer"},Object(o.b)(g,{id:l.titleString,updatedAt:l.updatedAt,mdxType:"H1"},"T-","".concat(c.b-4),": ",l.title),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Quoting directly from ",Object(o.b)("a",Object(a.a)({parentName:"strong"},{href:"https://vulkan.lunarg.com/doc/view/1.2.131.2/linux/tutorial/html/10-init_render_pass.html"}),"LunarG Tutorials"))),Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("em",{parentName:"p"},"A render pass describes the scope of a rendering\noperation by specifying the collection of attachments,\nsubpasses, and dependencies used during the rendering\noperation. A render pass consists of at least one subpass.\nThe communication of this information to the driver\nallows the driver to know what to expect when rendering\nbegins and to set up the hardware optimally for the\nrendering operation."))),Object(o.b)("p",null,"As we all know, a Train cannot fly or sail, as it's\nscope is limited to rails. Similarly, RenderPass helps\nto define a scope for rendering, i.e., what kind of rendering\nwill happen when commands are executed on GPU. For e.g. a\nshader pass will only handle shading an image while\nrendering."),Object(o.b)("p",null,"Since GPU can handle many parallel tasks in one go, we can\ncreate different render passes to do different scoped\nrendering per thread."),Object(o.b)(f,{type:"warn",mdxType:"Blockquote"},"I won't discuss this topic in-depth, as even I have to explore this topic a lot more.",Object(o.b)("br",null),Object(o.b)("p",null,"  For now, I would\nsuggest you read ",Object(o.b)(m,{external:!0,href:"https://vulkan.lunarg.com/doc/view/1.2.131.2/linux/tutorial/html/10-init_render_pass.html",mdxType:"Link"},"LunarG RenderPass Post"),".")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"In this section, we will only be creating and defining\nthe render pass and not using it in a command buffer\nuntil later.")),Object(o.b)("h2",{id:"code"},"Code"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rs"}),'struct Renderer<B: Backend> {\n    ...\n    // Render Pass instance\n    render_pass: ManuallyDrop<B::RenderPass>,\n}\nimpl<B: Backend> Renderer<B> {\n    pub fn new(\n        instance: B::Instance,\n        mut surface: B::Surface,\n        init_extent: hal_window::Extent2D,\n    ) -> Result<Self, &\'static str> {\n        ...\n        let render_pass = {\n            let color_attachment = Attachment {\n                format: Some(format),\n                samples: 1,\n                ops: AttachmentOps::INIT,\n                stencil_ops: AttachmentOps::DONT_CARE,\n                layouts: Layout::Undefined..Layout::Present,\n            };\n\n            let subpass = SubpassDesc {\n                colors: &[(0, Layout::ColorAttachmentOptimal)],\n                depth_stencil: None,\n                inputs: &[],\n                resolves: &[],\n                preserves: &[],\n            };\n\n            unsafe {\n                device\n                    .create_render_pass(&[color_attachment], &[subpass], &[])\n                    .expect("Out of memory")\n            }\n        };\n        Renderer {\n            ...\n            render_pass: ManuallyDrop::new(render_pass),\n        }\n    }\n}\n\nimpl<B: Backend> Drop for Renderer<B> {\n    fn drop(&mut self) {\n        unsafe {\n            self.device\n                .destroy_render_pass(ManuallyDrop::into_inner(ptr::read(&self.render_pass)));\n            ...\n        }\n    }\n}\n')),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.rs/gfx-hal/0.5.0/gfx_hal/pass/struct.Attachment.html"}),"Attachment"),"s\nare details about resources that will be passed in this RenderPass.\nFor example, we will be initially working with only Colors;\nthus, a Color Attachment (which would be an Image for a color) will\nbe passed as an Attachment to Render Pass."),Object(o.b)("p",null,"Later on, we will also be adding an attachment to Depth Buffer,\nwhich will be used as Z depth of the cube."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Subpass")," here is used for defining which attachment to use\nwhile rendering during the subpass."),Object(o.b)(h,{prev:u.link,prevLabel:u.titleString,mdxType:"MoveOtherPage"})))}y.isMDXComponent=!0},rFFW:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return l}));var a=n("q1tI"),r=n.n(a),i=n("Q88C"),s=n("Swb2"),o=r.a.createElement,c={"display-window":{key:"display-window",link:"/gfx-hal-initials/display-window",title:"Setup & Display Blank Window",titleString:"Setup & Display Blank Window",description:"Learn Displaying a Blank Window using winit and bind it to gfx-hal surface instance",ogImage:"https://user-images.githubusercontent.com/11786283/82109997-98852400-9758-11ea-84a0-aa3996c67f86.jpg",tags:[i.a.RUST],createdAt:new Date("2020/04/25 17:00:00"),updatedAt:new Date("2020/05/28 23:50:00"),isPublished:!0},"physical-logical-devices":{key:"physical-logical-devices",link:"/gfx-hal-initials/physical-logical-devices",title:"Adapters & Physical/Logical Devices & Device Queues",titleString:"Adapters & Physical/Logical Devices & Device Queues",description:"Learn to Instantiate Vulkan Physical/Logical Devices and get Device Queue from gfx-hal adapters",ogImage:"https://user-images.githubusercontent.com/11786283/82111231-485e8f80-9761-11ea-9f21-8843d4a66752.jpg",tags:[i.a.TUTORIAL,i.a.RUST,i.a.GFX_HAL],createdAt:new Date("2020/05/16 8:45:00"),updatedAt:new Date("2020/05/29 9:25:00"),isPublished:!0},"swap-chain":{key:"swap-chain",link:"/gfx-hal-initials/swap-chain",title:o("span",null,"SwapChain and Image Views in \xa0",o(s.a,null,"gfx-hal")),titleString:"SwapChain and Image Views in gfx-hal",description:"Learning about Swapchain, Double Buffering and Image Views. Understanding the implementation of SwapChain in gfx-hal",ogImage:"https://user-images.githubusercontent.com/11786283/82640938-22396380-9c29-11ea-9ee5-9a7fc01920da.jpg",tags:[i.a.TUTORIAL,i.a.RUST,i.a.GFX_HAL],createdAt:new Date("2020/05/22 10:20:00"),updatedAt:new Date("2020/06/06 14:00:00"),isPublished:!0},"render-pass":{key:"render-pass",link:"/gfx-hal-initials/render-pass",title:"Render Pass",titleString:"Render Pass in Vulkan",description:"Render Pass initialization and basic understanding in Vulkan",ogImage:"https://user-images.githubusercontent.com/11786283/82640938-22396380-9c29-11ea-9ee5-9a7fc01920da.jpg",tags:[i.a.TUTORIAL,i.a.RUST,i.a.GFX_HAL],createdAt:new Date("2020/06/06 14:30:00"),updatedAt:new Date("2020/06/06 14:30:00"),isPublished:!0},"command-buffers":{key:"command-buffers",link:"/gfx-hal-initials/command-buffers",title:"Command Buffers & Pool",titleString:"Command Buffers & Pool",description:"Understanding Command Pools and Command Buffers in Vulkan and gfx-hal",ogImage:"https://user-images.githubusercontent.com/11786283/82124794-f0567600-97be-11ea-9023-ea1467a6b734.jpg",tags:[i.a.TUTORIAL,i.a.RUST,i.a.GFX_HAL],createdAt:new Date("2020/05/16 21:45:00"),updatedAt:new Date("2020/05/16 21:45:00"),isPublished:!0},shaders:{key:"shaders",link:"/gfx-hal-initials/shaders",title:"Shaders",titleString:"Shaders",description:"Understanding Shaders & writing minimal Shader using GLSL Shading language",ogImage:"https://user-images.githubusercontent.com/11786283/82640938-22396380-9c29-11ea-9ee5-9a7fc01920da.jpg",tags:[i.a.TUTORIAL,i.a.RUST,i.a.GFX_HAL],createdAt:new Date("2020/05/23 19:30:00"),updatedAt:new Date("2020/05/23 19:35:00"),isPublished:!0}},l=Object.keys(c).length}},[["EJ+/",0,1,2]]]);