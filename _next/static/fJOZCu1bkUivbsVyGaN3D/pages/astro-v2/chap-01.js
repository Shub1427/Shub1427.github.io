(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n("q1tI"),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,d=p["".concat(c,".").concat(b)]||p[b]||m[b]||o;return n?a.a.createElement(d,l({ref:t},s,{components:n})):a.a.createElement(d,l({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[b]="string"===typeof e?e:r,c[1]=l;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},AsOh:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m}));var r=n("wx14"),a=n("Ff2n"),o=n("q1tI"),c=n.n(o),l=n("7ljp"),i=(c.a.createElement,function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(l.b)("div",t)}}),s=i("Diff"),u=i("CodeBlock"),p={},b="wrapper";function m(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(l.b)(b,Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"Astro Blaster"),Object(l.b)("p",null,"This Tutorial is mostly made up from Astro Blaster example from\nGgez game engine in Rust."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("strong",{parentName:"p"},"NOTE"),": It is assumed that you have little bit experience in Rust lang\nalready. Rust book is a great place to start and learn Rust\nif already not read.")),Object(l.b)("h2",null,"What are we Building"),Object(l.b)("p",null,"We will be building a Nostalgic Astro Blaster Game from 90s.\nThe purpose of this post is to keep an archive for myself (and\nothers), who are very beginners in game programming and does'nt\nknow some basic concepts used in game dev."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},Object(l.b)("strong",{parentName:"p"},"TLDR;")," You can find the code here: ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Shub1427/rustschool/tree/master/gui/ggez_basics/src/bin/astro_blaster_v2"}),"rustschool"))),Object(l.b)("p",null,"Do keep in mind, I am not writing best code, or better said this might be the worst code\never written \ud83d\ude1c.\nWhat I am trying to achieve here is a minimal understanding for the type of code\nwritten in the world of Game dev, like:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"How to show some images on screen."),Object(l.b)("li",{parentName:"ul"},"How to use Game units instead of pixel, to get a resolution independent code."),Object(l.b)("li",{parentName:"ul"},"How to use keyboard for inputs. What ",Object(l.b)("inlineCode",{parentName:"li"},"Edge-Triggered")," and ",Object(l.b)("inlineCode",{parentName:"li"},"Level-Triggered")," keyboard events are.")),Object(l.b)("p",null,"Concepts of applying Physics, once these things are clear becomes easy."),Object(l.b)("h2",null,"Draw Black Background on Screen"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rs"}),'use ggez::event;\nuse ggez::graphics;\nuse ggez::{Context, ContextBuilder, GameResult};\n\nstruct World {\n    stage: usize, // Nothing else for now.\n}\n\nimpl World {\n    fn new() -> Self {\n        World {\n            stage: 0\n        }\n    }\n}\n\nimpl event::EventHandler for World {\n    fn update(&mut self, _ctx: &mut Context) -> GameResult {\n        Ok(())\n    }\n\n    fn draw(&mut self, ctx: &mut Context) -> GameResult {\n        graphics::clear(ctx, graphics::BLACK); // Clear with Black Background\n        graphics::present(ctx)?; // It\'s important to present the buffer on Screen\n        Ok(())\n    }\n}\n\nfn main() -> GameResult {\n    let (ctx, event_loop) = &mut ContextBuilder::new("Astro Blaster v2", "Subroto Biswas")\n        .build()?;\n    let mut state = World::new();\n    event::run(ctx, event_loop, &mut state)\n}\n')),Object(l.b)("p",null,"Diff: ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Shub1427/rustschool/commit/74bae4596c1cf1f0bec324946860422023d77d0c"}),"74bae4596c1cf1f0bec324946860422023d77d0c")),Object(l.b)("h2",null,"Add an Image Resource root"),Object(l.b)("p",null,"We need to to create a Player now. The player needs some image to represent itself.\nThus we need to load resources someway. Following changes, helps us to setup root dir\nto look into for all our resources."),Object(l.b)(s,{lang:"rs",addedLineNumbers:[3,5],removedLineNumbers:[],hideLines:!0,mdxType:"Diff"},'// main.rs\n// in fn main()\nlet resource_dir = "./src/bin/astro_blaster_v2/resources";\nlet (ctx, event_loop) = &mut ContextBuilder::new("Astro Blaster v2", "Subroto Biswas")\n    .add_resource_path(resource_dir)\n    .build()?;\nlet mut state = World::new();\nevent::run(ctx, event_loop, &mut state)'),Object(l.b)("p",null,"Now, Calling this simple function, will load resources from this root directory.\nFor example:"),Object(l.b)(u,{className:"language-rs",showLines:!1,mdxType:"CodeBlock"},'let player_image = graphics::Image::new(ctx, "/player.png")?;'),Object(l.b)("p",null,"So, we now know how to load our resources, we now need to create a ",Object(l.b)("inlineCode",{parentName:"p"},"Player")," instance and draw it's image\non screen."),Object(l.b)("p",null,"First thing, to create a new ",Object(l.b)("inlineCode",{parentName:"p"},"mod")," for ",Object(l.b)("inlineCode",{parentName:"p"},"Player")," struct and it's implementations."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Create a file ",Object(l.b)("inlineCode",{parentName:"li"},"player.rs"))),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rs"}),'// player.rs\n\npub struct Player {\n    image: graphics::Image,\n    pos: nalgebra::Point2<f32>,\n    // Player\'s Facing Direction\n    facing: f32,\n}\n\nimpl Player {\n    pub fn new(ctx: &mut Context) -> GameResult<Self> {\n        Ok(Player {\n            image: graphics::Image::new(ctx, "/playerShip1_blue.png")?,\n            pos: nalgebra::Point2::new(24.0, 24.0),\n            facing: 0.,\n        })\n    }\n}\n\nimpl event::EventHandler for Player {\n    fn update(&mut self, _ctx: &mut Context) -> GameResult {\n        // Do nothing for now;\n        Ok(())\n    }\n\n    fn draw(&mut self, ctx: &mut Context) -> GameResult {\n        let params = graphics::DrawParam::default()\n            .dest(self.pos)\n            .scale(nalgebra::Vector2::new(0.5, 0.5));\n        graphics::draw(ctx, &self.image, params)?;\n        Ok(())\n    }\n}\n')),Object(l.b)("p",null,"Now we just need to call the ",Object(l.b)("inlineCode",{parentName:"p"},"draw")," implementation of ",Object(l.b)("inlineCode",{parentName:"p"},"Player")," in ",Object(l.b)("inlineCode",{parentName:"p"},"World"),"s ",Object(l.b)("inlineCode",{parentName:"p"},"draw")," calls."),Object(l.b)(s,{lang:"rs",addedLineNumbers:[5],removedLineNumbers:[],hideLines:!0,mdxType:"Diff"},"// main.rs\n//\nfn draw(&mut self, ctx: &mut Context) -> GameResult {\n    graphics::clear(ctx, graphics::BLACK); // Clear with Black Background\n    self.player.draw(ctx)?;\n    graphics::present(ctx)?; // It's important to present the buffer on Screen\n    Ok(())\n}"),Object(l.b)("p",null,"Diff: ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Shub1427/rustschool/commit/c207cd3b5810b7a2775ccffcc77cc4e4db1a7b5e"}),"c207cd3b5810b7a2775ccffcc77cc4e4db1a7b5e")))}m.isMDXComponent=!0},Ff2n:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n("zLVn");function a(e,t){if(null==e)return{};var n,a,o=Object(r.a)(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}},Qetd:function(e,t,n){"use strict";var r=Object.assign.bind(Object);e.exports=r,e.exports.default=e.exports},kG13:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/astro-v2/chap-01",function(){return n("AsOh")}])},wx14:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},zLVn:function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n.d(t,"a",(function(){return r}))}},[["kG13",0,1]]]);