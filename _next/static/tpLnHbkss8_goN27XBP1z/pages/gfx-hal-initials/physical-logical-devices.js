(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"7c7i":function(e,t,n){"use strict";n.r(t),n.d(t,"record",(function(){return l})),n.d(t,"default",(function(){return m}));var a=n("wx14"),i=n("Ff2n"),r=n("q1tI"),c=n.n(r),o=n("7ljp"),s=n("zAA7"),l=(c.a.createElement,s.a["physical-logical-devices"]),u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",t)}},p=u("PolkaContainer"),d=u("H1"),b=u("Image"),f={record:l},g="wrapper";function m(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)(g,Object(a.a)({},f,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)(p,{pageTitle:l.title,pageDescription:l.description,keywords:["Vulkan","Basics","Fundamental","Beginner","Physical Device","Logical Device","gfx-hal"],publishDate:l.createdAt,ogImage:l.ogImage,mdxType:"PolkaContainer"},Object(o.b)(d,{updatedAt:l.updatedAt,wordCount:520,mdxType:"H1"},l.title),Object(o.b)(b,{alt:"Get Physical Device from Backend to Logical Devices",src:"https://user-images.githubusercontent.com/11786283/82109324-a8016e80-9752-11ea-89ba-677880ada6b1.png",placeholder:"https://user-images.githubusercontent.com/11786283/82109811-ac2f8b00-9756-11ea-88db-3cbc70ee1350.png",mdxType:"Image"}),Object(o.b)("h2",null,"What is a Device"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Physical Device - denotes to the actual Hardware device present in your Computer. It gives\na vector, that has Device details as elements. Each item pointing to the GPU hardware you have.\nSo, if you have Single NVidia GPU, you will get a single item vector, having details on that device."),Object(o.b)("li",{parentName:"ul"},"Logical Device - Basically it is a representation of Physical device, that the application will use\nto compute their logic. In ",Object(o.b)("inlineCode",{parentName:"li"},"gfx-hal")," to get logical device, you need to open ",Object(o.b)("inlineCode",{parentName:"li"},"physical_device"),".\n(Details discussed at the end).")),Object(o.b)("h2",null,"What details does a device has"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'// Adapter Info\n{\n  name: "GeForce GTX 1060 6GB",\n  vendor: 4310,\n  device: 7114,\n  // Enum - { Other = 0, IntegratedGpu = 1, DiscreteGpu = 2, VirtualGpu = 3, Cpu = 4 }\n  device_type: DiscreteGpu,\n}\n\n// Physical Device, used to fetch details on gpu memory etc.\n\n// Queue Families\n[\n  {\n    properties: {\n      queue_flags: GRAPHICS | COMPUTE | TRANSFER | SPARSE_BINDING,\n      queue_count: 16,\n      timestamp_valid_bits: 64,\n      min_image_transfer_granularity: {\n        width: 1,\n        height: 1,\n        depth: 1,\n      },\n    },\n    device: 0x00005622e6d7d271,\n    index: 0,\n  },\n  {\n    properties: {\n      queue_flags: TRANSFER,\n      queue_count: 1,\n      timestamp_valid_bits: 64,\n      min_image_transfer_granularity: {\n        width: 1,\n        height: 1,\n        depth: 1,\n      },\n    },\n    device: 0x00005622e6d7d270,\n    index: 1,\n  }\n]\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Info is self-explanatory.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Physical Device - (To be Explored)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"QueueFamilies - consist of multiple queue details a Device supports. A queue excepts Command buffers\nto operate on, but only for a specific type. Each queue detail in queue families, has Queue Flags,\nwhich determines what type of command-buffers a queue can to pass on to GPU.\nSo, ",Object(o.b)("inlineCode",{parentName:"p"},"queue_flags: GRAPHICS")," can accept only graphics related operations in Command Buffer."),Object(o.b)("p",{parentName:"li"},"For an ellaborated explanation, see this ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://stackoverflow.com/a/55273688/2849127"}),"thread")))),Object(o.b)("h2",null,"Logical Devices"),Object(o.b)(b,{alt:"How to get Logical Devices from Physical Device",src:"https://user-images.githubusercontent.com/11786283/77247969-01ba5080-6c5c-11ea-8202-3c83e1a25b51.png",placeholder:"https://user-images.githubusercontent.com/11786283/82109903-8951a680-9757-11ea-8acc-b88bbc173fce.png",mdxType:"Image"}),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rs"}),'let mut gpu = unsafe {\n  adapter\n    .physical_device\n    .open(&[(&adapter.queue_families[0], &[1.0])], gfx_hal::Features::empty())\n    .unwrap()\n};\n\n// Logical Device\nprintln!("Logical Device: {:#?}", gpu.device);\n')),Object(o.b)("p",null,"We will be using Logical Devices to create Command Pools and Buffer to pass onto GPU.")))}m.isMDXComponent=!0},"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return g}));var a=n("q1tI"),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),u=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"===typeof e?e(t):o({},t,{},e)),n},p=function(e){var t=u(e.components);return(i.a.createElement(l.Provider,{value:t},e.children))},d="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},f=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,f=p["".concat(c,".").concat(d)]||p[d]||b[d]||r;return n?i.a.createElement(f,o({ref:t},l,{components:n})):i.a.createElement(f,o({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var r=n.length,c=new Array(r);c[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"===typeof e?e:a,c[1]=o;for(var l=2;l<r;l++)c[l]=n[l];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},Ff2n:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n("zLVn");function i(e,t){if(null==e)return{};var n,i,r=Object(a.a)(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}},Q88C:function(e,t,n){"use strict";var a;n.d(t,"a",(function(){return a})),function(e){e.TUTORIAL="tutorial",e.PROJECT="project",e.RESEARCH="research",e.RUST="rust",e.JS="javascript",e.REACT="reactjs",e.GFX_HAL="gfx-hal"}(a||(a={}))},Qetd:function(e,t,n){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},hzGs:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/gfx-hal-initials/physical-logical-devices",function(){return n("7c7i")}])},wx14:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return a}))},zAA7:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n("Q88C"),i={"rust-cargo-basics":{key:"rust-cargo-basics",link:"/gfx-hal-initials/rust-cargo-basics",title:"Basics on Rust & Cargo",description:"Basics on Rust & Cargo",ogImage:"https://user-images.githubusercontent.com/11786283/81770497-0c77c000-94fe-11ea-95bc-44e5e432b1d8.jpg",tags:[a.a.RUST],createdAt:new Date("2020/04/26 22:00:00"),updatedAt:new Date("2020/04/26 22:00:00"),isPublished:!0},"display-window":{key:"display-window",link:"/gfx-hal-initials/display-window",title:"Display Window",description:"Displaying Window using winit and bind it to gfx-hal surface instance",ogImage:"https://user-images.githubusercontent.com/11786283/82109997-98852400-9758-11ea-84a0-aa3996c67f86.jpg",tags:[a.a.RUST],createdAt:new Date("2020/04/25 17:00:00"),updatedAt:new Date("2020/05/09 23:50:00"),isPublished:!0},"physical-logical-devices":{key:"physical-logical-devices",link:"/gfx-hal-initials/physical-logical-devices",title:"Physical & Logical Devices",description:"We would be looking into all       instances devices from gfx-hal,       which resembles Vulkan devices.       We will also learn some basics on enumerating these devices and stuff.",ogImage:"https://user-images.githubusercontent.com/11786283/82110133-848df200-9759-11ea-9b97-d0134d0fa971.jpg",tags:[a.a.TUTORIAL,a.a.RUST,a.a.GFX_HAL],createdAt:new Date("2020/05/16 8:45:00"),updatedAt:new Date("2020/05/16 8:45:00"),isPublished:!0}}},zLVn:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,"a",(function(){return a}))}},[["hzGs",0,1]]]);