(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"0Hkh":function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n("Q88C"),i={"rust-cargo-basics":{key:"rust-cargo-basics",link:"/rust-reference/rust-cargo-basics",title:"Basics on Rust & Cargo",titleString:"Basics on Rust & Cargo",description:"Basics on Rust & Cargo",ogImage:"https://user-images.githubusercontent.com/11786283/81770497-0c77c000-94fe-11ea-95bc-44e5e432b1d8.jpg",tags:[a.a.RUST],createdAt:new Date("2020/04/26 22:00:00"),updatedAt:new Date("2020/04/26 22:00:00"),isPublished:!0},"rust-smart-pointers":{key:"rust-smart-pointers",link:"/rust-reference/rust-smart-pointers",title:"Smart Pointers",titleString:"Smart Pointers",description:"Some notes on Box<>, Rc<>, RefCell<> etc.",ogImage:"https://user-images.githubusercontent.com/11786283/81770497-0c77c000-94fe-11ea-95bc-44e5e432b1d8.jpg",tags:[a.a.RUST],createdAt:new Date("2020/05/22 17:45:00"),updatedAt:new Date("2020/05/22 17:45:00"),isPublished:!0}}},"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n("q1tI"),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),u=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"===typeof e?e(t):s({},t,{},e)),n},d=function(e){var t=u(e.components);return(i.a.createElement(c.Provider,{value:t},e.children))},b="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},g=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),b=a,g=d["".concat(o,".").concat(b)]||d[b]||p[b]||r;return n?i.a.createElement(g,s({ref:t},c,{components:n})):i.a.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[b]="string"===typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},Bnpe:function(e,t,n){"use strict";n.r(t),n.d(t,"record",(function(){return c})),n.d(t,"default",(function(){return j}));var a=n("wx14"),i=n("Ff2n"),r=n("q1tI"),o=n.n(r),s=n("7ljp"),l=n("rFFW"),c=(n("RYGM"),n("0Hkh"),o.a.createElement,l.a.shaders),u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(s.b)("div",t)}},d=u("PolkaContainer"),b=u("H1"),p=u("Blockquote"),g=u("Link"),m=u("InlineCode"),h={record:c},f="wrapper";function j(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)(f,Object(a.a)({},h,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)(d,{pageTitle:c.title,pageTitleString:c.titleString,pageDescription:c.description,keywords:["Vulkan","Basics","Fundamental","Beginner","gfx-hal"],publishDate:c.createdAt,ogImage:c.ogImage,mdxType:"PolkaContainer"},Object(s.b)(b,{updatedAt:c.updatedAt,mdxType:"H1"},"T-","".concat(l.b-5),": ",c.title),Object(s.b)("p",null,"Shaders are pixel manipulation tools. To create shaders, we\nuse some kind of\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Shading_language"}),"Shading Language"),"."),Object(s.b)("p",null,"Some interesting details on Shaders can be found\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.cs.vu.nl/~eliens/download/literatuur-shaders.pdf"}),"in this Abstract")),Object(s.b)("p",null,"We would be using ",Object(s.b)("inlineCode",{parentName:"p"},"GLSL")," as our Shading Language in\nour Demo."),Object(s.b)("p",null,"Before moving forward, we should know what\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.khronos.org/registry/spir-v/specs/unified1/SPIRV.html"}),"SPIR-V"),"\nis!!! SPIR-V is an intermediate language defined by Khronos\nGroup for Vulkan. It is the language that Vulkan understands\nand thus ",Object(s.b)("inlineCode",{parentName:"p"},"gfx-hal")," too. So to work with shaders in ",Object(s.b)("inlineCode",{parentName:"p"},"gfx-hal"),"\nwe can use any Shading Language, but we need to first\nconvert those Shader Code into SPIR-V format and then\ncan we use it directly in ",Object(s.b)("inlineCode",{parentName:"p"},"gfx-hal"),"."),Object(s.b)(p,{type:"warn",mdxType:"Blockquote"},"Currently Rust does not have any native module to support JIT compilation of any Shading Language to SPIR-V. Thus, currently setting up Shaders in Rust is quite difficult.",Object(s.b)("br",null),Object(s.b)("br",null),"There is an ongoing discussion for this on\xa0",Object(s.b)(g,{href:"https://github.com/rust-gamedev/wg/issues/23",target:"_blank",rel:"noopener noreferrer",mdxType:"Link"},"rust-gamedev working group"),", but is far from any conclusion.",Object(s.b)("br",null),Object(s.b)("br",null),"There are ways to work with shaders in",Object(s.b)(m,{mdxType:"InlineCode"},"gfx-hal"),", but they are quite complex to setup.",Object(s.b)("br",null),Object(s.b)("br",null),"Easiest way is to pre-compile your ",Object(s.b)(m,{mdxType:"InlineCode"},"GLSL"),"or ",Object(s.b)(m,{mdxType:"InlineCode"},"HLSL")," code to SPIR-V format and use that directly in ",Object(s.b)(m,{mdxType:"InlineCode"},"gfx-hal"),".",Object(s.b)("br",null),Object(s.b)("br",null),"To get a JIT compilation in native Rust, we will have to wait. Currently there is an ongoing project in",Object(s.b)(m,{mdxType:"InlineCode"},"gfx")," community, named\xa0",Object(s.b)(g,{href:"https://github.com/gfx-rs/naga",target:"_blank",rel:"noopener noreferrer",mdxType:"Link"},"naga"),", to support cross-platform, multi Shader Languages all in pure Rust.",Object(s.b)("br",null),Object(s.b)("br",null),Object(s.b)(g,{href:"https://github.com/gfx-rs/naga/pull/50",target:"_blank",rel:"noopener noreferrer",mdxType:"Link"},"GLSL support is on it's way")),Object(s.b)("p",null,"Details on ",Object(s.b)("inlineCode",{parentName:"p"},"naga"),", can be found\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://gfx-rs.github.io/2019/07/13/javelin.html"}),"here")),Object(s.b)("h2",null,"Understanding ",Object(s.b)("inlineCode",{parentName:"h2"},"GLSL")),Object(s.b)("p",null,"I am new to shaders completely. For me choosing any Shading\nLanguage was difficult, let aside understanding ",Object(s.b)("inlineCode",{parentName:"p"},"SPIR-V")," and\novercoming Rust's support for any stable Shader language\nsupport."),Object(s.b)("p",null,"I am just following people here, and have found ",Object(s.b)("inlineCode",{parentName:"p"},"HLSL")," and\n",Object(s.b)("inlineCode",{parentName:"p"},"GLSL")," to be used more often. ",Object(s.b)("inlineCode",{parentName:"p"},"GLSL")," being used more effectively\nin the Open Source Community. Thus, will understand and use\n",Object(s.b)("inlineCode",{parentName:"p"},"GLSL")," in our projects as well."),Object(s.b)("p",null,"If you have no prior knowledge on Shaders, I would recommend\nto ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://gamedevelopment.tutsplus.com/tutorials/a-beginners-guide-to-coding-graphics-shaders--cms-23313"}),"read this post")," once,\njust to get some quick hands on."),Object(s.b)("p",null,"I am keeping link a to\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf"}),"GLSL language specs"),"\nhere, as a reference."),Object(s.b)("p",null,"Moving forward!! Teaching ",Object(s.b)("inlineCode",{parentName:"p"},"GLSL")," is out of scope for this post,\nbut you can go through this ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radixzz/awesome-glsl"}),"awesome shaders list"),"\nfor resources to teach you GLSL."),Object(s.b)("p",null,"We would be testing two shaders"),Object(s.b)("h2",null,"Pre Compilation of GLSL Shaders"),Object(s.b)("p",null,"I would recommend you to try the solution mentioned in\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://falseidolfactory.com/2018/06/23/compiling-glsl-to-spirv-at-build-time.html"}),"Compiling GLSL to SPIR-V"),",\nfor simplicity of converting ",Object(s.b)("inlineCode",{parentName:"p"},"GLSL"),"\nshader files to ",Object(s.b)("inlineCode",{parentName:"p"},"SPIR-V")," files."),Object(s.b)("p",null,"Though I failed to run the script mentioned in\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://falseidolfactory.com/2018/06/23/compiling-glsl-to-spirv-at-build-time.html"}),"Compiling GLSL to SPIR-V"),".\nAlso, ",Object(s.b)("inlineCode",{parentName:"p"},"glsl-to-spirv")," is outdated.\nIt was part of project ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/vulkano-rs/vulkano"}),"vulkano"),",\nbut is abandoned in\nsupport of google's ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/google/shaderc"}),"shaderc"),"\nproject, which we will be using as well."),Object(s.b)(p,{type:"warn",mdxType:"Blockquote"},"I would like to warn you though!! ",Object(s.b)(m,{mdxType:"InlineCode"},"shaderc"),"is a ",Object(s.b)(m,{mdxType:"InlineCode"},"C"),"/",Object(s.b)(m,{mdxType:"InlineCode"},"C++"),"project and thus setting it up is tedious and harder compared to Rust's ",Object(s.b)(m,{mdxType:"InlineCode"},"Cargo"),"ecosystem.",Object(s.b)("br",null),Object(s.b)("br",null),"It is also good to note that, either we can use it as a command line tool, using ",Object(s.b)(m,{mdxType:"InlineCode"},"glslc")," binary, to pre-compile our ",Object(s.b)(m,{mdxType:"InlineCode"},"GLSL"),"/",Object(s.b)(m,{mdxType:"InlineCode"},"HLSL")," Shaders, or we can use\xa0",Object(s.b)(g,{href:"https://github.com/google/shaderc-rs",target:"_blank",rel:"noopener noreferrer",mdxType:"Link"},"Rust Shaderc Bindings"),"\xa0 in our rust code, so as to compile our ",Object(s.b)(m,{mdxType:"InlineCode"},"GLSL"),"/",Object(s.b)(m,{mdxType:"InlineCode"},"HLSL")," shaders at runtime.",Object(s.b)("br",null),"We will discuss both. If you are able to compile and use",Object(s.b)(m,{mdxType:"InlineCode"},"glslc")," binary, than using",Object(s.b)(m,{mdxType:"InlineCode"},"shaderc-rs")," in rust won't be of any trouble."),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"Before moving forward, you can use ",Object(s.b)("a",Object(a.a)({parentName:"em"},{href:"http://shader-playground.timjones.io/"}),"Shader Playground"),"\nto get some basic understanding on how ",Object(s.b)("inlineCode",{parentName:"em"},"GLSL")," get's\nconverted into ",Object(s.b)("inlineCode",{parentName:"em"},"SPIR-V")," format.")),Object(s.b)("p",null,"Details on compilation of ",Object(s.b)("inlineCode",{parentName:"p"},"shaderc")," can be found\n",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/google/shaderc#getting-and-building-shaderc"}),"in there doc"),".\nThough I would like to mention some dependencies, to be present\nbefore compilation, in short here, assuming you are using\nLinux or Mac OS (Mac OS should have ",Object(s.b)("inlineCode",{parentName:"p"},"brew")," installed for simplicity)."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"gcc")," should be installed. (For MacOS use ",Object(s.b)("inlineCode",{parentName:"li"},"brew install gcc"),")"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"cmake")," should be installed. (For MacOS use ",Object(s.b)("inlineCode",{parentName:"li"},"brew install cmake"),")"),Object(s.b)("li",{parentName:"ul"},"Clone the repo somewhere",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"Run Command - ",Object(s.b)("inlineCode",{parentName:"li"},"git clone https://github.com/google/shaderc $SOURCE_DIR")),Object(s.b)("li",{parentName:"ul"},"Change Directory - ",Object(s.b)("inlineCode",{parentName:"li"},"cd $SOURCE_DIR")))),Object(s.b)("li",{parentName:"ul"},"Once you have cloned the repo, inside the cloned repo directory\nyou need to run ",Object(s.b)("inlineCode",{parentName:"li"},"./utils/git-sync-deps")," for all important\ndependency to get pulled into the directory for compilation"),Object(s.b)("li",{parentName:"ul"},"Create a Build Directory and step inside it - ",Object(s.b)("inlineCode",{parentName:"li"},"mkdir ./build && cd ./build")),Object(s.b)("li",{parentName:"ul"},"Some important dependencies to install before hand:",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"gcov"),", if already not installed. (For MacOS use ",Object(s.b)("inlineCode",{parentName:"li"},"brew install gcov"),")"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"lcov")," (For MacOS use ",Object(s.b)("inlineCode",{parentName:"li"},"brew install lcov"),")"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"ninja")," for ",Object(s.b)("inlineCode",{parentName:"li"},"cmake")," builds (For MacOS use ",Object(s.b)("inlineCode",{parentName:"li"},"brew install ninja"),")"))),Object(s.b)("li",{parentName:"ul"},"Now you need to build the configurations for ",Object(s.b)("inlineCode",{parentName:"li"},"shaderc"),",\nusing command - ",Object(s.b)("inlineCode",{parentName:"li"},"cmake -GNinja -DCMAKE_BUILD_TYPE=Release $SOURCE_DIR")),Object(s.b)("li",{parentName:"ul"},"Once configuration files are generated, you need to build\nthe project to get compiled versions:",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"Run command - ",Object(s.b)("inlineCode",{parentName:"li"},"ninja")),Object(s.b)("li",{parentName:"ul"},"There might be some ",Object(s.b)("inlineCode",{parentName:"li"},"warnings")," which is ok, but do check\nthat you don't get any ",Object(s.b)("inlineCode",{parentName:"li"},"error")," while binaries are getting\ngenerated."),Object(s.b)("li",{parentName:"ul"},"Have some patience \ud83d\ude01")))),Object(s.b)("p",null,"If everything goes fine, you will find ",Object(s.b)("inlineCode",{parentName:"p"},"glslc")," binary inside\n",Object(s.b)("inlineCode",{parentName:"p"},"$SOURCE_DIR/build/glslc"),". We can now directly use ",Object(s.b)("inlineCode",{parentName:"p"},"glslc")," to\npre-compile our ",Object(s.b)("inlineCode",{parentName:"p"},"GLSL")," shaders to ",Object(s.b)("inlineCode",{parentName:"p"},"SPIR-V"),".")))}j.isMDXComponent=!0},Q88C:function(e,t,n){"use strict";var a;n.d(t,"a",(function(){return a})),function(e){e.TUTORIAL="tutorial",e.PROJECT="project",e.RESEARCH="research",e.RUST="rust",e.JS="javascript",e.REACT="reactjs",e.GFX_HAL="gfx-hal"}(a||(a={}))},RYGM:function(e,t,n){"use strict";n.d(t,"b",(function(){return l})),n.d(t,"a",(function(){return c}));var a=n("q1tI"),i=n.n(a),r=n("Q88C"),o=n("Swb2"),s=i.a.createElement,l={"rust-reference":{key:"rust-reference",link:"/rust-reference",title:"Advance Rust Reference",titleString:"Advance Rust Reference",description:"Some advance concepts in Rust that were difficult for me to understand.       This Doc is trying to keep a reference of all those topics, for me to take       a reference from later for easier understanding",ogImage:"https://user-images.githubusercontent.com/11786283/82665354-47da6300-9c51-11ea-87c7-bb996eb79de1.jpg",tags:[r.a.RUST],createdAt:new Date("2020/05/22 17:25:00"),updatedAt:new Date("2020/05/22 17:25:00"),isPublished:!0},"performance-reactjs":{key:"performance-reactjs",link:"/performance-reactjs",title:"Performance Improvements in JS and ReactJS",titleString:"Performance Improvements in JS and ReactJS",description:"Recent Performance related findings of mine, which I am jotting down here for later reference",ogImage:"https://user-images.githubusercontent.com/11786283/81769128-6f675800-94fa-11ea-99d6-57dc42166eaa.jpg",tags:[r.a.RESEARCH,r.a.JS,r.a.REACT],createdAt:new Date("2020/05/07 09:15:00"),updatedAt:new Date("2020/05/09 23:15:00"),isPublished:!0},"upload-client-logs":{key:"upload-client-logs",link:"/upload-client-logs",title:"Client Browser Log to your Server",titleString:"Client Browser Log to your Server",description:"Sometimes (like to get details on performance) there is a requirement to log data       from end-user's browser to you own servers, for which this note will talk about.",ogImage:"https://user-images.githubusercontent.com/11786283/81769041-37601500-94fa-11ea-98f7-f353dca53e6b.jpg",tags:[r.a.PROJECT,r.a.JS,r.a.REACT],createdAt:new Date("2020/04/29 08:30:00"),updatedAt:new Date("2020/05/09 12:30:00"),isPublished:!0},"word-counter":{key:"word-counter",link:"/word-counter",title:"Word Counter in Rust",titleString:"Word Counter in Rust",description:"Just a fun bin script for my project, to count words in my MDX files.",ogImage:"https://user-images.githubusercontent.com/11786283/81768977-fd8f0e80-94f9-11ea-8425-953f8639d80e.jpg",tags:[r.a.PROJECT,r.a.RUST],createdAt:new Date("2020/04/26 22:00:00"),updatedAt:new Date("2020/04/26 22:00:00"),isPublished:!0},"gfx-hal-basics":{key:"gfx-hal-basics",link:"/gfx-hal-initials",title:s("span",null,"Learn to Draw a Cube using\xa0",s(o.a,null,"gfx-hal")),titleString:"Learn to Draw a Cube using gfx-hal",description:"Learn to draw a cube using gfx-hal. Also understand       concepts of Vulkan while learning to draw a cube",ogImage:"https://user-images.githubusercontent.com/11786283/81768708-514d2800-94f9-11ea-95d3-36796815a31f.jpg",tags:[r.a.TUTORIAL,r.a.RUST],createdAt:new Date("2020/04/26 10:00:00"),updatedAt:new Date("2020/04/26 16:00:00"),isPublished:!0},"astro-v2":{key:"astro-v2",link:"/astro-v2",title:"Astro Blaster v2 in Rust",titleString:"Astro Blaster v2 in Rust",description:"A very minimal game making tutorial in Rust using ggez",ogImage:"https://user-images.githubusercontent.com/11786283/81768159-f1a24d00-94f7-11ea-83e3-8b9212d4851c.jpg",tags:[r.a.TUTORIAL,r.a.RUST],createdAt:new Date("2020/04/10"),updatedAt:new Date("2020/04/12"),isPublished:!0}},c=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){return Object.prototype.hasOwnProperty.call(e,n)&&t.push(e[n]),t}),[])}(l)},rFFW:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return c}));var a=n("q1tI"),i=n.n(a),r=n("Q88C"),o=n("Swb2"),s=i.a.createElement,l={"display-window":{key:"display-window",link:"/gfx-hal-initials/display-window",title:"Setup & Display Blank Window",titleString:"Setup & Display Blank Window",description:"Learn Displaying a Blank Window using winit and bind it to gfx-hal surface instance",ogImage:"https://user-images.githubusercontent.com/11786283/82109997-98852400-9758-11ea-84a0-aa3996c67f86.jpg",tags:[r.a.RUST],createdAt:new Date("2020/04/25 17:00:00"),updatedAt:new Date("2020/05/28 23:50:00"),isPublished:!0},"physical-logical-devices":{key:"physical-logical-devices",link:"/gfx-hal-initials/physical-logical-devices",title:"Adapters & Physical/Logical Devices & Device Queues",titleString:"Adapters & Physical/Logical Devices & Device Queues",description:"Learn to Instantiate Vulkan Physical/Logical Devices and get Device Queue from gfx-hal adapters",ogImage:"https://user-images.githubusercontent.com/11786283/82111231-485e8f80-9761-11ea-9f21-8843d4a66752.jpg",tags:[r.a.TUTORIAL,r.a.RUST,r.a.GFX_HAL],createdAt:new Date("2020/05/16 8:45:00"),updatedAt:new Date("2020/05/29 9:25:00"),isPublished:!0},"swap-chain":{key:"swap-chain",link:"/gfx-hal-initials/swap-chain",title:s("span",null,"SwapChain and Image Views in \xa0",s(o.a,null,"gfx-hal")),titleString:"SwapChain and Image Views in gfx-hal",description:"Learning about Swapchain, Double Buffering and Image Views. Understanding the implementation of SwapChain in gfx-hal",ogImage:"https://user-images.githubusercontent.com/11786283/82640938-22396380-9c29-11ea-9ee5-9a7fc01920da.jpg",tags:[r.a.TUTORIAL,r.a.RUST,r.a.GFX_HAL],createdAt:new Date("2020/05/22 10:20:00"),updatedAt:new Date("2020/06/06 14:00:00"),isPublished:!0},"render-pass":{key:"render-pass",link:"/gfx-hal-initials/render-pass",title:"Render Pass",titleString:"Render Pass in Vulkan",description:"Render Pass initialization and basic understanding in Vulkan",ogImage:"https://user-images.githubusercontent.com/11786283/82640938-22396380-9c29-11ea-9ee5-9a7fc01920da.jpg",tags:[r.a.TUTORIAL,r.a.RUST,r.a.GFX_HAL],createdAt:new Date("2020/06/06 14:30:00"),updatedAt:new Date("2020/06/06 14:30:00"),isPublished:!0},"command-buffers":{key:"command-buffers",link:"/gfx-hal-initials/command-buffers",title:"Command Buffers & Pool",titleString:"Command Buffers & Pool",description:"Understanding Command Pools and Command Buffers in Vulkan and gfx-hal",ogImage:"https://user-images.githubusercontent.com/11786283/82124794-f0567600-97be-11ea-9023-ea1467a6b734.jpg",tags:[r.a.TUTORIAL,r.a.RUST,r.a.GFX_HAL],createdAt:new Date("2020/05/16 21:45:00"),updatedAt:new Date("2020/05/16 21:45:00"),isPublished:!0},shaders:{key:"shaders",link:"/gfx-hal-initials/shaders",title:"Shaders",titleString:"Shaders",description:"Understanding Shaders & writing minimal Shader using GLSL Shading language",ogImage:"https://user-images.githubusercontent.com/11786283/82640938-22396380-9c29-11ea-9ee5-9a7fc01920da.jpg",tags:[r.a.TUTORIAL,r.a.RUST,r.a.GFX_HAL],createdAt:new Date("2020/05/23 19:30:00"),updatedAt:new Date("2020/05/23 19:35:00"),isPublished:!0}},c=Object.keys(l).length},vm4k:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/gfx-hal-initials/shaders",function(){return n("Bnpe")}])}},[["vm4k",0,1,2]]]);