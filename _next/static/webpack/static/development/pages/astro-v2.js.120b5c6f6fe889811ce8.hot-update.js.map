{"version":3,"file":"static/webpack/static/development/pages/astro-v2.js.120b5c6f6fe889811ce8.hot-update.js","sources":["webpack:///./pages/astro-v2/chap-01.md"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Diff = makeShortcode(\"Diff\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Astro Blaster`}</h1>\n    <p>{`This Tutorial is mostly made up from Astro Blaster example from\nGgez game engine in Rust.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong>{`: It is assumed that you have little bit experience in Rust lang\nalready. Rust book is a great place to start and learn Rust\nif already not read.`}</p>\n    </blockquote>\n    <h2>{`What are we Building`}</h2>\n    <p>{`We will be building a Nostalgic Astro Blaster Game from 90s.\nThe purpose of this post is to keep an archive for myself (and\nothers), who are very beginners in game programming and does'nt\nknow some basic concepts used in game dev.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`TLDR;`}</strong>{` You can find the code here: `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/Shub1427/rustschool/tree/master/gui/ggez_basics/src/bin/astro_blaster_v2\"\n        }}>{`rustschool`}</a></p>\n    </blockquote>\n    <p>{`Do keep in mind, I am not writing best code, or better said this might be the worst code\never written ðŸ˜œ.\nWhat I am trying to achieve here is a minimal understanding for the type of code\nwritten in the world of Game dev, like:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`How to show some images on screen.`}</li>\n      <li parentName=\"ul\">{`How to use Game units instead of pixel, to get a resolution independent code.`}</li>\n      <li parentName=\"ul\">{`How to use keyboard for inputs. What `}<inlineCode parentName=\"li\">{`Edge-Triggered`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`Level-Triggered`}</inlineCode>{` keyboard events are.`}</li>\n    </ul>\n    <p>{`Concepts of applying Physics, once these things are clear becomes easy.`}</p>\n    <h2>{`Draw Black Background on Screen`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rs\"\n      }}>{`use ggez::event;\nuse ggez::graphics;\nuse ggez::{Context, ContextBuilder, GameResult};\n\nstruct World {\n    stage: usize, // Nothing else for now.\n}\n\nimpl World {\n    fn new() -> Self {\n        World {\n            stage: 0\n        }\n    }\n}\n\nimpl event::EventHandler for World {\n    fn update(&mut self, _ctx: &mut Context) -> GameResult {\n        Ok(())\n    }\n\n    fn draw(&mut self, ctx: &mut Context) -> GameResult {\n        graphics::clear(ctx, graphics::BLACK); // Clear with Black Background\n        graphics::present(ctx)?; // It's important to present the buffer on Screen\n        Ok(())\n    }\n}\n\nfn main() -> GameResult {\n    let (ctx, event_loop) = &mut ContextBuilder::new(\"Astro Blaster v2\", \"Subroto Biswas\")\n        .build()?;\n    let mut state = World::new();\n    event::run(ctx, event_loop, &mut state)\n}\n`}</code></pre>\n    <p>{`Diff: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Shub1427/rustschool/commit/74bae4596c1cf1f0bec324946860422023d77d0c\"\n      }}>{`74bae4596c1cf1f0bec324946860422023d77d0c`}</a></p>\n    <h2>{`Add an Image Resource root`}</h2>\n    <p>{`We need to to create a Player now. The player needs some image to represent itself.\nThus we need to load resources someway. Following changes, helps us to setup root dir\nto look into for all our resources.`}</p>\n    <Diff lang=\"rs\" addedLineNumbers={[1, 3]} removedLineNumbers={[]} mdxType=\"Diff\">{`let resource_dir = \"./src/bin/astro_blaster_v2/resources\";\nlet (ctx, event_loop) = &mut ContextBuilder::new(\"Astro Blaster v2\", \"Subroto Biswas\")\n    .add_resource_path(resource_dir)\n    .build()?;\nlet mut state = World::new();\nevent::run(ctx, event_loop, &mut state)`}\n    </Diff>\n    <p>{`Now, Calling this simple function, will load resources from this root directory.\nFor example:`}</p>\n    <CodeBlock className=\"language-rs\" showLines={false} mdxType=\"CodeBlock\">{`let player_image = graphics::Image::new(ctx, \"/player.png\")?;`}</CodeBlock>\n    <p>{`So, we now know how to load our resources, we now need to create a `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{` instance and draw it's image\non screen.`}</p>\n    <p>{`First thing, to create a new `}<inlineCode parentName=\"p\">{`mod`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{` struct and it's implementations.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create a file `}<inlineCode parentName=\"li\">{`player.rs`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rs\"\n      }}>{`// player.rs\n\npub struct Player {\n    image: graphics::Image,\n    pos: nalgebra::Point2<f32>,\n    // Player's Facing Direction\n    facing: f32,\n}\n\nimpl Player {\n    pub fn new(ctx: &mut Context) -> GameResult<Self> {\n        Ok(Player {\n            image: graphics::Image::new(ctx, \"/playerShip1_blue.png\")?,\n            pos: nalgebra::Point2::new(24.0, 24.0),\n            facing: 0.,\n        })\n    }\n}\n\nimpl event::EventHandler for Player {\n    fn update(&mut self, _ctx: &mut Context) -> GameResult {\n        // Do nothing for now;\n        Ok(())\n    }\n\n    fn draw(&mut self, ctx: &mut Context) -> GameResult {\n        graphics::draw(ctx, &self.image, graphics::DrawParam::default().dest(self.pos))?;\n        Ok(())\n    }\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAGA;AAFA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqkCA;AAEA;AACA;;;;A","sourceRoot":""}