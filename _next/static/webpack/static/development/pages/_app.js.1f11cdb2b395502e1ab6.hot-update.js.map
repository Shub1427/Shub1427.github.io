{"version":3,"file":"static/webpack/static/development/pages/_app.js.1f11cdb2b395502e1ab6.hot-update.js","sources":["webpack:///./components/code-block.tsx"],"sourcesContent":["import React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/cjs/languages/prism/jsx';\nimport tsx from 'react-syntax-highlighter/dist/cjs/languages/prism/tsx';\nimport rust from 'react-syntax-highlighter/dist/cjs/languages/prism/rust';\nimport bash from 'react-syntax-highlighter/dist/cjs/languages/prism/bash';\n// Remove this, once `react-syntax-highlighter` is updated to support `toml` lang\nimport toml from 'refractor/lang/toml';\nimport atomDark from 'react-syntax-highlighter/dist/cjs/styles/prism/darcula';\nimport { makeStyles, Theme } from '@material-ui/core';\nimport WindowControlIcons from './window-control-icons';\n\nSyntaxHighlighter.registerLanguage('js', jsx);\nSyntaxHighlighter.registerLanguage('ts', tsx);\nSyntaxHighlighter.registerLanguage('rust', rust);\nSyntaxHighlighter.registerLanguage('toml', toml);\nSyntaxHighlighter.registerLanguage('bash', bash);\n\nexport interface ICodeBlockProps {\n  showLines?: boolean;\n  className: string;\n  children: React.ReactChild;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    marginTop: 16,\n    marginBottom: 48,\n    padding: 0,\n    borderRadius: 4,\n    background: theme.palette.primary.main,\n    overflow: 'hidden',\n    boxShadow: 'rgba(0, 0, 0, 0.55) 0px 10px 32px',\n  },\n  windowBlock: {\n    position: 'relative',\n    padding: 16,\n    borderRadius: 4,\n  },\n  windowControls: {\n    position: 'relative',\n    paddingBottom: 8,\n  },\n  codeBlock: {\n    marginBottom: '-64px !important',\n    padding: '0 0 64px 0 !important',\n\n    '& *::selection': {\n      background: '#ffe082',\n    },\n    '& *::-moz-selection': {\n      background: '#ffe082',\n    },\n  },\n}));\n\nexport default function CodeBlock({\n  children,\n  className,\n  showLines = false,\n}: ICodeBlockProps) {\n  const classes = useStyles();\n  const details = className.replace(/language-/, '');\n  // eslint-disable-next-line prefer-const\n  let [language, linesEnabledStr] = details.split('.');\n  const linesEnabled = /true/i.test(linesEnabledStr);\n  switch (language) {\n    case 'rs':\n      language = 'rust';\n      break;\n    case 'sh':\n    case 'bash':\n      language = 'bash';\n      break;\n  }\n  return (\n    <div className={classes.root}>\n      <div\n        className={classes.windowBlock}\n        style={{\n          background:\n            atomDark[':not(pre) > code[class*=\"language-\"]'].background,\n        }}\n      >\n        <div className={classes.windowControls}>\n          <WindowControlIcons />\n        </div>\n        <SyntaxHighlighter\n          language={language}\n          className={classes.codeBlock}\n          style={atomDark}\n          showLineNumbers={linesEnabledStr == null ? showLines : linesEnabled}\n        >\n          {children}\n        </SyntaxHighlighter>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAPA;AAnBA;AAgCA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAPA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;A","sourceRoot":""}