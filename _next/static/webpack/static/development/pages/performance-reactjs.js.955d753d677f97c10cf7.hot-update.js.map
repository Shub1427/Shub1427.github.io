{"version":3,"file":"static/webpack/static/development/pages/performance-reactjs.js.955d753d677f97c10cf7.hot-update.js","sources":["webpack:///./pages/performance-reactjs.md"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { archiveRecord } from '@constants/archive-list';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst PolkaContainer = makeShortcode(\"PolkaContainer\");\nconst H1 = makeShortcode(\"H1\");\nconst Blockquote = makeShortcode(\"Blockquote\");\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <PolkaContainer mdxType=\"PolkaContainer\">\n      <H1 updatedAt={archiveRecord['performance-reactjs'].updatedAt} wordCount={971} mdxType=\"H1\">\n  Improve Performance in JS and ReactJS\n      </H1>\n      <Blockquote type=\"warn\" mdxType=\"Blockquote\">\n  This blog is a <b>Work in Progress</b>, and I am hoping to work on it part by part when I\n  would have already worked on it once. Parts of the doc are complete as I have worked on\n  it before and can asure, that they will surely benefit in Improving Performance.\n  <br />\n  <br />\n        <p>{`  ⚠️ `}{` `}{`For now, read it at your own risk!!!`}</p>\n      </Blockquote>\n      <h2>{`References to take a look at:`}</h2>\n      <ul>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://addyosmani.com/blog/profiling-react-js/\"\n          }}>{`Addy Osmani's Profiling ReactJS`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3\"\n          }}>{`Twitter's Blog on their Performance Improvements for Twitter Lite`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7\"\n          }}>{`Handle Too many Socket events creating Backpressure`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://reactjs.org/docs/optimizing-performance.html\"\n          }}>{`React Optimizing Performance`}</a></li>\n      </ul>\n      <blockquote>\n        <p parentName=\"blockquote\">{`These guides were enough to boost my app performance.`}</p>\n        <p parentName=\"blockquote\">{`Backpressure is something that is not exactly related to ReactJS\nand can occur to any JS app. To handle Backpressure, we have various ways,\none of which I used in our Project.`}</p>\n      </blockquote>\n      <hr></hr>\n      <h2>{`React Profiling`}</h2>\n      <p>{`Ok. So, if you are lazy and don't want to put too much effort on\nfinding Performance glitches, Profiling is the best option.`}</p>\n      <p>{`React DevTools provides a developer with `}<inlineCode parentName=\"p\">{`Profiler`}</inlineCode>{`, which provides\nre-redering data of components in Flame-Graph. This flame graph was\ndeveloped by `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/bvaughn\"\n        }}>{`Brian Vaughn`}</a>{`, creator\nof `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/bvaughn/react-window\"\n        }}>{`react-window`}</a>{`, which\nhe is using to virtualize the flame graphs as well.`}</p>\n      <blockquote>\n        <p parentName=\"blockquote\">{`By default, you do not need to\n`}<inlineCode parentName=\"p\">{`import { unstable_Profiler as Profiler } from \"react\";`}</inlineCode>{`\nas of v16.4+ (I guess), `}<inlineCode parentName=\"p\">{`Profiler`}</inlineCode>{` is by default added to react development\nbuilds. If you do face that the Profiler in Devtools is not working,\ntry importing the above Profiler Component, and wrap your Root Component\nwith `}<inlineCode parentName=\"p\">{`<Profiler />`}</inlineCode>{`.`}</p>\n      </blockquote>\n      <p>{`These Flame Graphs are easy to understand, and pin-points which Components\nare getting rendered unnecessarily.`}</p>\n      <p>{`Once you get to know which Components are getting re-rendered, due to some\nprop changes that shouldn't re-render them, you can use:`}</p>\n      <ul>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`shouldComponentUpdate`}</inlineCode>{` - is a React Component Lifecycle Method to render\nthe component only according to your own logic. Apply some shallow\ncomparisons here, and you are good to go.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`React.memo`}</inlineCode>{` - If you are not using Class Components, `}<inlineCode parentName=\"li\">{`React.memo`}</inlineCode>{` is\nrequired to make your Functional component act as PureComponents. Also,\n`}<inlineCode parentName=\"li\">{`React.memo`}</inlineCode>{` takes function as argument, where you can shallow compare\nprevious props with new props to decide when to render.`}</li>\n      </ul>\n      <p>{`Above steps helps `}<em parentName=\"p\">{`memoizing`}</em>{` React Components, but that's not enough if you\nuse Connected (or Container) Components. Vanilla Connected Components can\nhave `}<inlineCode parentName=\"p\">{`mapStateToProps`}</inlineCode>{` that re-renders the whole component, whenever some state\nchanges which is not even mapped to connected component.`}</p>\n      <br />\n      <p>{`For such cases, simplest solution is to use Selectors with Redux, specially\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/reduxjs/reselect\"\n        }}>{`ReSelect`}</a>{`.`}</p>\n      <p>{`If you don't want to introduce `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/reduxjs/reselect\"\n        }}>{`ReSelect`}</a>{`, and do things by yourself, then you need to create your own\nselectors and memoize them. Best and less complex library to memoize\nfunctions is `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/alexreardon/memoize-one\"\n        }}>{`memoize-one`}</a>{`.`}</p>\n      <br />\n      <p>{`Combining both of the above solutions, will improve your app performance\na lot. For me it gave a 50% increase in performance.`}</p>\n      <h3>{`Browser Profiling`}</h3>\n      <p>{`We are not limited to React DevTools Profiler, and I highly recommend to do\nProfiling in Browser DevTools as well, as it gives a broader insight on what\nis going on.`}</p>\n      <p><a parentName=\"p\" {...{\n          \"href\": \"https://nolanlawson.com/2018/09/25/accurately-measuring-layout-on-the-web/\"\n        }}>{`Details on How to read Profiling on Browser DevTools`}</a></p>\n      <hr></hr>\n      <h2>{`Defer Rendering When Mounting & Unmounting Many Components`}</h2>\n      <p>{`You can find a better explanation `}<a parentName=\"p\" {...{\n          \"href\": \"https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3\"\n        }}>{`here`}</a></p>\n      <br />\n      <p><strong parentName=\"p\">{`TLDR;`}</strong>{` Deferring a Render just means call any state updates behind\n`}<inlineCode parentName=\"p\">{`requestAnimationFrame`}</inlineCode>{`. What this will do is put the load off your\nBrowser's main thread for sometime and allow the user to interact with UI\nwithout jankiness (or having an un-responsive UI).`}</p>\n      <hr></hr>\n      <h2>{`Long lists need to have Virtualization or Pagination`}</h2>\n      <p>{`Lists can be one of the bottlenecks in performance, if not done right.\nMost of the UI libraries out there are vanilla `}<inlineCode parentName=\"p\">{`<ul />`}</inlineCode>{` lists.`}</p>\n      <p>{`Using 3rd-party Virtualization libs like `}<inlineCode parentName=\"p\">{`react-window`}</inlineCode>{` or\n`}<inlineCode parentName=\"p\">{`react-virtualized`}</inlineCode>{` could help improve performance as well as\nFPS of Scrolling.`}</p>\n      <p>{`You can get a very detailed explanation of what virtualization is, and\nwhat hurdles we need to resolve while building a Virtualized List,\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://developers.google.com/web/updates/2016/07/infinite-scroller\"\n        }}>{`here @ Complexities of Infinite Scroller`}</a>{`.`}</p>\n      <p><em parentName=\"p\">{`I think I will try to build a virtualized list in Rust,someday. Let's see!!!`}</em>{` `}<img class=\"emoji\" title=\":bowtie:\" alt=\":bowtie:\" src=\"https://github.githubassets.com/images/icons/emoji/bowtie.png\" width=\"20\" height=\"20\" align=\"absmiddle\" /></p>\n      <br />\n      <p>{`Virtualization is difficult to integrate in `}<em parentName=\"p\">{`Chat apps`}</em>{`, where the list\nneeds to be scrolled bottom-up and can have dynamic height for each\nlist item.`}</p>\n      <p>{`So my implementation was to use a simple non virtualized list (relatively\npositioned list items). Most of the `}<em parentName=\"p\">{`Chat apps`}</em>{` in real world, like in\nFacebook or in Hangouts, all use the same principle. They paginate the\nchat with infinite scroll and use relatively positioned list.`}</p>\n      <blockquote>\n        <p parentName=\"blockquote\">{`Hope to create a separate blog, for Infinite Scrollable\nList using `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\"\n          }}>{`IntersectionObserver`}</a>{`,\nwhich I worked on while working on Chat App at\n`}<a parentName=\"p\" {...{\n            \"href\": \"https://www.upgrad.com/\"\n          }}>{`upGrad`}</a>{`.`}</p>\n      </blockquote>\n      <p>{`Infinite Scrolling (without Virtualization) is fine, till the time we don't see our list getting\nbombarded with too many DOM elements. In Chat, I haven't figured out a proper way to virtualize\nthe list, but I am feeling that it will become very crucial when a Chat App is used by thousands\nof user at the same time, all bombarding messages in an instant populating chat messages in thousands,\nin a list which is not virtualized, the DOM will eat too much memory due to too many list items.`}</p>\n      <p>{`I will try `}<inlineCode parentName=\"p\">{`react-window`}</inlineCode>{` this time, for virtualization, but I have a feeling it won't be easy.\nOne of the bugs I faced and thought was related to virtualization (but was not) is listed `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/bvaughn/react-window/issues/455\"\n        }}>{`here,\nwith a workaround solution`}</a>{`.`}</p>\n      <p><inlineCode parentName=\"p\">{`react-window`}</inlineCode>{` does not support dynamic item sizes, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/bvaughn/react-window/issues/6\"\n        }}>{`it's still a work in progress`}</a>{`, but I do hope instead of focusing on supporting grids, and\njust working on Vertical Lists would be easier for me to work on, using the approach that is\nmentioned in the issue. `}<a parentName=\"p\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"\n        }}>{`ResizeObserver`}</a>{`\nis something worth looking at, has OKayish support in major browsers.`}</p>\n      <hr></hr>\n      <h2>{`Buffering Events that change state in less than an Animation Frame`}</h2>\n      <Blockquote type=\"warn\" mdxType=\"Blockquote\">\nI would suggest you to read this blog before going forward <Link href=\"https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7\" target=\"_blank\" rel=\"noopener noreferrer\" mdxType=\"Link\">Handle Too many Socket events creating Backpressure</Link>, as it elaborates on basic concepts of\nBack Buffering.\n      </Blockquote>\n      <p><strong parentName=\"p\">{`TLDR;`}</strong>{` I am giving a small reference on how to implement buffering of events\nusing `}<inlineCode parentName=\"p\">{`rxjs`}</inlineCode>{`.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}>{`rxjs.fromEvent(socket, 'message').pipe(\n  () => source => source.pipe(\n    rxjs.operators.buffer(source.pipe(waitForAnimationFrame()))\n  ),\n);\n`}</code></pre>\n      <p><em parentName=\"p\">{`If say our Browser (or the Monitor in whole) supports only 60FPS, each `}<inlineCode parentName=\"em\">{`requestAnimationFrame`}</inlineCode>{` will run\nevery 16ms, we can conclude:`}</em></p>\n      <p>{`Above code is buffering all incoming messages, for each `}<inlineCode parentName=\"p\">{`requestAnimationFrame`}</inlineCode>{`. What this solve is:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`If I get 100 messages in less than `}<inlineCode parentName=\"li\">{`16ms`}</inlineCode>{` (for 60FPS screen), they all will be buffered into an\narray, and pushed to the subscriber all in one go after every `}<inlineCode parentName=\"li\">{`requestAnimationFrame`}</inlineCode>{` completes.`}</li>\n      </ul>\n      <p>{`This handles back-pressure, by allowing only 60 re-renders per second, which our Browser can really\nhandle, and not allow any unnecessary re-renders in-between.`}</p>\n      <p>{`Since, we are sure every `}<inlineCode parentName=\"p\">{`16ms`}</inlineCode>{` our buffer will be emptied, we don't have to worry too much on\nmemory overflows.`}</p>\n      <hr></hr>\n      <h2>{`Lazy Loading Images:`}</h2>\n      <p><em parentName=\"p\">{`I don't want to repeat things which are already done properly before, so to get details on`}</em>{`\n`}<em parentName=\"p\">{`Lazy Loading of Image, you can follow `}<a parentName=\"em\" {...{\n            \"href\": \"https://addyosmani.com/blog/lazy-loading/\"\n          }}>{`Addy Osmani's blog`}</a></em>{`\n`}<em parentName=\"p\">{`on the same, for better explanation. (To be honest I don't like writing that much, so saving myself`}</em>{`\n`}<em parentName=\"p\">{`some effort here as well`}</em>{` 😅 😬`}<em parentName=\"p\">{`)`}</em></p>\n      <p>{`One think I want to add here is that, if you do use Virtualized list, where each item contains\nimages, they are lazy loaded anyways, so this attribute is not required for virtualized lists.`}</p>\n      <h3>{`Preloading Image Src Sets (Not related to Perf, though):`}</h3>\n      <p><a parentName=\"p\" {...{\n          \"href\": \"https://web.dev/preload-responsive-images/\"\n        }}>{`Preload Images`}</a></p>\n      <h2>{`Pre-Loading and Pre-Fetching Links:`}</h2>\n      <h3>{`Pre-Loading Links:`}</h3>\n      <ul>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/\"\n          }}>{`Preload: What is it Good For?`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://web.dev/preload-critical-assets/\"\n          }}>{`Preload critical assets to improve loading speed`}</a></li>\n      </ul>\n      <h3>{`Pre-Fetching Links:`}</h3>\n      <ul>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ\"\n          }}>{`MDN Prefetch Doc`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://css-tricks.com/prefetching-preloading-prebrowsing/\"\n          }}>{`CSS Tricks Pre-*`}</a></li>\n      </ul>\n      <hr></hr>\n      <h2>{`Some Side Notes:`}</h2>\n      <ul>\n        <li parentName=\"ul\">{`SSR is also a way to optimize your performance, but I don't want to\ncover that.`}</li>\n        <li parentName=\"ul\">{`Statically serve your pages. This is something I am unaware of how to do\nit manually, but to support this feature, I suggest you to use `}<inlineCode parentName=\"li\">{`NextJS`}</inlineCode>{` or\nsome similar Statically generated framework like `}<inlineCode parentName=\"li\">{`Gatsby`}</inlineCode>{`. In `}<inlineCode parentName=\"li\">{`NextJS`}</inlineCode>{`,\ndo not use `}<inlineCode parentName=\"li\">{`getInitialProps`}</inlineCode>{` for Page components, and NextJS spits\nout static HTMLs for React App on build.`}</li>\n      </ul>\n      <h2>{`TODOs:`}</h2>\n      <p>{`I want to add more stuff here, regarding performance research\nwhich I am still exploring:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Using Puppeteer to get stats on performance`}</li>\n        <li parentName=\"ul\">{`Bundle Size optimizations, using `}<inlineCode parentName=\"li\">{`webpack`}</inlineCode><ul parentName=\"li\">\n            <li parentName=\"ul\">{`Something to research on later `}<a parentName=\"li\" {...{\n                \"href\": \"https://web.dev/granular-chunking-nextjs/\"\n              }}>{`Granular Chunking`}</a></li>\n            <li parentName=\"ul\">{`Not sure if this link will be alive later, but still something to look into later\n`}<a parentName=\"li\" {...{\n                \"href\": \"https://docs.google.com/document/d/11t4Ix2bvF1_ZCV9HKfafGfWu82zbOD7aUhZ_FyDAgmA/edit?usp=sharing\"\n              }}>{`WebBundles`}</a></li>\n            <li parentName=\"ul\"><a parentName=\"li\" {...{\n                \"href\": \"https://codeascraft.com/2020/02/03/production-webpack-builds/\"\n              }}>{`Fast Production Asset Builds using Webpack`}</a></li>\n          </ul></li>\n      </ul>\n    </PolkaContainer>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappingssourceRoot":""}