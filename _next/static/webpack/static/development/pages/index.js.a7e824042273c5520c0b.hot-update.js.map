{"version":3,"file":"static/webpack/static/development/pages/index.js.a7e824042273c5520c0b.hot-update.js","sources":["webpack:///./constants/archive-list.ts"],"sourcesContent":["import { Tags } from './tags';\nimport { ISortParams } from '@utils/sort-by';\nimport { toArray } from '@utils/array-utils';\n\nexport interface IArchiveItem extends ISortParams {\n  key: string;\n  link: string;\n  title: React.ReactNode;\n  description: React.ReactNode;\n  tags: Tags[];\n  updatedAt: Date;\n  isPublished: boolean;\n}\n\n// I know, it is good to have a DB and a Backend, but\n// for simplicity and saving cost, I am ignoring the Backend\nexport const archiveRecord: Record<string, IArchiveItem> = {\n  'performance-reactjs': {\n    key: 'performance-reactjs',\n    link: '/performance-reactjs',\n    title: 'Performance Improvements in JS and ReactJS',\n    description:\n      'Recent Performance related findings of mine, which I am jotting down here for later reference',\n    tags: [Tags.RESEARCH, Tags.JS, Tags.REACT],\n    createdAt: new Date('2020/05/07 09:15:00'),\n    updatedAt: new Date('2020/05/07 09:15:00'),\n    isPublished: true,\n  },\n  'upload-client-logs': {\n    key: 'upload-client-logs',\n    link: '/upload-client-logs',\n    title: 'Client Browser Log to your Server',\n    description:\n      \"Sometimes (like to get details on performance) there is a requirement to log data \\\n      from end-user's browser to you own servers, for which this note will talk about.\",\n    tags: [Tags.PROJECT, Tags.JS, Tags.REACT],\n    createdAt: new Date('2020/04/29 08:30:00'),\n    updatedAt: new Date('2020/05/03 23:30:00'),\n    isPublished: true,\n  },\n  'word-counter': {\n    key: 'word-counter',\n    link: '/word-counter',\n    title: 'Word Counter in Rust',\n    description:\n      'Just a fun bin script for my project, to count words in my MDX files.',\n    tags: [Tags.PROJECT, Tags.RUST],\n    createdAt: new Date('2020/04/26 22:00:00'),\n    updatedAt: new Date('2020/04/26 22:00:00'),\n    isPublished: true,\n  },\n  'gfx-hal-basics': {\n    key: 'gfx-hal-basics',\n    link: '/gfx-hal-initials',\n    title: 'Basics on Vulkan using gfx-hal',\n    description:\n      'Reference Notes for me (and others) to help get started with Rust and Vulkan',\n    tags: [Tags.TUTORIAL, Tags.RUST],\n    createdAt: new Date('2020/04/26 10:00:00'),\n    updatedAt: new Date('2020/04/26 16:00:00'),\n    isPublished: true,\n  },\n  'astro-v2': {\n    key: 'astro-v2',\n    link: '/astro-v2',\n    title: 'Astro Blaster v2 in Rust',\n    description: 'A very minimal game making tutorial in Rust using ggez',\n    tags: [Tags.TUTORIAL, Tags.RUST],\n    createdAt: new Date('2020/04/10'),\n    updatedAt: new Date('2020/04/12'),\n    isPublished: true,\n  },\n};\n\nexport const archiveList = toArray(archiveRecord);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AA9CA;AA0DA;;;;A","sourceRoot":""}