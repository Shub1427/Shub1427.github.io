{"version":3,"file":"static/webpack/static/development/pages/gfx-hal-initials/display-window.js.664b9438d667e929143a.hot-update.js","sources":["webpack:///./constants/gfx-hal-archive-list.ts","webpack:///./pages/gfx-hal-initials/display-window.md"],"sourcesContent":["import { IArchiveItem } from '@constants/archive-list';\nimport { Tags } from '@constants/tags';\n\nexport const halArchiveRecord: Record<string, IArchiveItem> = {\n  'rust-cargo-basics': {\n    key: 'rust-cargo-basics',\n    link: '/gfx-hal-initials/rust-cargo-basics',\n    title: 'Basics on Rust & Cargo',\n    description: 'Basics on Rust & Cargo',\n    tags: [Tags.RUST],\n    createdAt: new Date('2020/04/26 22:00:00'),\n    updatedAt: new Date('2020/04/26 22:00:00'),\n    isPublished: true,\n  },\n  'display-window': {\n    key: 'display-window',\n    link: '/gfx-hal-initials/display-window',\n    title: 'Display Window',\n    description:\n      'Displaying Window using winit and bind it to gfx-hal surface instance',\n    tags: [Tags.RUST],\n    createdAt: new Date('2020/04/25 17:00:00'),\n    updatedAt: new Date('2020/04/25 17:00:00'),\n    isPublished: false,\n  },\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { halArchiveRecord } from '@constants/gfx-hal-archive-list';\nexport const record = halArchiveRecord['display-window'];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst PolkaContainer = makeShortcode(\"PolkaContainer\");\nconst H1 = makeShortcode(\"H1\");\nconst Image = makeShortcode(\"Image\");\nconst layoutProps = {\n  record\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PolkaContainer mdxType=\"PolkaContainer\">\n      <H1 updatedAt={record.updatedAt} wordCount={520} mdxType=\"H1\">\n  {record.title}\n      </H1>\n      <p>{`Vulkan is a very low-level spec, which intends to keep as less overhead of code as it can.\n`}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` is a library which closely resembles the Vulkan specs (not entirely though), to provide\nthe developers with clean APIs, that are very similar to Vulkan specs. Also, `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` provides\nmultiple graphics backends to make our code cross-platform compatible.`}</p>\n      <p><em parentName=\"p\">{`Code for this Note, can be found `}<a parentName=\"em\" {...{\n            \"href\": \"https://github.com/Shub1427/rustschool/blob/master/gui/gfx-rs/src/001-show_window/main.rs\"\n          }}>{`here`}</a>{`\nParts of the code would be referenced here, to make things clear.`}</em></p>\n      <h2>{`Vulkan Instance and Surface`}</h2>\n      <Image alt=\"Vulkan Flow Image\" src=\"https://user-images.githubusercontent.com/11786283/77244041-e4bf5680-6c36-11ea-96a1-2be7bd71ccbd.png\" placeholder=\"https://user-images.githubusercontent.com/11786283/80305144-bce48500-87d8-11ea-9832-4baaaf8ce41f.png\" mdxType=\"Image\" />\n      <p>{`This Tutorial is inspired from `}<a parentName=\"p\" {...{\n          \"href\": \"https://vulkan.lunarg.com/doc/sdk/1.2.131.2/linux/tutorial/html/index.html\"\n        }}>{`LunarG Vulkan Tutorial`}</a>{`,\nwhich is written in `}<inlineCode parentName=\"p\">{`C++`}</inlineCode>{`. I am trying to learn `}<inlineCode parentName=\"p\">{`Rust`}</inlineCode>{` and converting that tutorial into `}<inlineCode parentName=\"p\">{`Rust`}</inlineCode>{`,\nusing `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` library, which is a wrapper over Vulkan Specs.`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Application: is what we will build using `}<inlineCode parentName=\"li\">{`gfx-hal`}</inlineCode></li>\n        <li parentName=\"ul\">{`Loader: here refers to `}<inlineCode parentName=\"li\">{`gfx-hal`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`gfx-backend-vulkan`}</inlineCode>{` libraries. An isntance of\n`}<inlineCode parentName=\"li\">{`gfx-backend-vulkan`}</inlineCode>{` inititalizes a Loader. Creating an instance, intializes the loader.`}</li>\n        <li parentName=\"ul\">{`Layers: is something advanced, and am not sure when or if I will talk about it at-all.`}</li>\n      </ul>\n      <h2>{`Backend`}</h2>\n      <Image alt=\"GFX Hal Backends\" src=\"https://user-images.githubusercontent.com/11786283/77244047-03255200-6c37-11ea-885d-2d8b981bb8a8.png\" placeholder=\"https://user-images.githubusercontent.com/11786283/80305177-eb626000-87d8-11ea-9d40-0a632affdd2f.png\" mdxType=\"Image\" />\n      <p>{`Backends are specific to what GPU u have and what specs it supports.`}</p>\n      <p>{`Vulkan Backend is cross-compatible and has support in Linux/Widnows, on AMD, Intel, NVidia etc.`}</p>\n      <blockquote>\n        <p parentName=\"blockquote\">{`Apple stays out, and I hate this thing about it, it doesn't support Vulkan, and has speicifc\nbackend in Metal. Though `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` has `}<inlineCode parentName=\"p\">{`metal`}</inlineCode>{` backend as well.`}</p>\n      </blockquote>\n      <p>{`To work with `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` we need to create an instance of a specific Backend which can be controlled using Rust Feature Configurations.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`#[cfg(feature = \"dx12\")]\nuse gfx_backend_dx12 as back;\n#[cfg(feature = \"metal\")]\nuse gfx_backend_metal as back;\n#[cfg(feature = \"vulkan\")]\nuse gfx_backend_vulkan as back;\n`}</code></pre>\n      <h2>{`Creating Window instance`}</h2>\n      <p>{`Now let's come back to our code. In real world, to draw anything we need a canvas, right. Similary, in\nGraphics to draw anything, we need a OS Window. Later to bind OS Window with GPU draw calls, we will be\nneeding a `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{` instance. Creation of Window in Rust is done using `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{` library, which again is\ncross-platform. It requires two major steps to display a blank window:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Window Dimensions`}</li>\n        <li parentName=\"ul\">{`Event Loop, that will help us to know when to redraw, w.r.t CPU and GPU capabilities`}<ul parentName=\"li\">\n            <li parentName=\"ul\">{`We will discuss this on some other thread.`}</li>\n          </ul></li>\n      </ul>\n      <h2>{`Instance`}</h2>\n      <p>{`Vulkan instance is the starting point to work with Vulkan. A Vulkan instance actually takes the name\nof Application, and provides us with various APIs, specially to `}<inlineCode parentName=\"p\">{`enumerate_devices`}</inlineCode>{`.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`// create(application_name, application_version);\nlet instance = back::Instance::create(\"Backend Instance\", 1)\n  .expect(\"Failed to create an instance!\");\n`}</code></pre>\n      <h2>{`Surface`}</h2>\n      <p>{`Vulkan requires a canvas or `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{` to draw things into and a `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{` can only exist inside\na OS App Window. Usually we will be using a 3rd-party module to create OS specific Window instances,\nlike `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{`, and thw window instance to create a `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{`.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`// \\`wb\\` is \\`winit\\` window_builder.\nlet window = wb.build(event_loop).unwrap();\n\n// Create the Surface:\nlet surface = unsafe {\n  instance\n    .create_surface(&window)\n    .expect(\"Failed to create a surface!\")\n};****\n`}</code></pre>\n    </PolkaContainer>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAGA;AAFA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AACA;;;;A","sourceRoot":""}