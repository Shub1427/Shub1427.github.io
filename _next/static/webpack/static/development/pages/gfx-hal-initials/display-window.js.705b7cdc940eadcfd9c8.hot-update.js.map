{"version":3,"file":"static/webpack/static/development/pages/gfx-hal-initials/display-window.js.705b7cdc940eadcfd9c8.hot-update.js","sources":["webpack:///./pages/gfx-hal-initials/display-window.md"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { halArchiveRecord } from '@constants/gfx-hal-archive-list';\nexport const record = halArchiveRecord['display-window'];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst PolkaContainer = makeShortcode(\"PolkaContainer\");\nconst H1 = makeShortcode(\"H1\");\nconst Image = makeShortcode(\"Image\");\nconst Blockquote = makeShortcode(\"Blockquote\");\nconst Diff = makeShortcode(\"Diff\");\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  record\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PolkaContainer mdxType=\"PolkaContainer\">\n      <H1 updatedAt={record.updatedAt} wordCount={520} mdxType=\"H1\">\n  {record.title}\n      </H1>\n      <p>{`Vulkan is a very low-level spec, which intends to keep as less overhead of code as it can.\n`}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` is a library which closely resembles the Vulkan specs (not entirely though), to provide\nthe developers with clean APIs, that are very similar to Vulkan specs. Also, `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` provides\nmultiple graphics backends to make our code cross-platform compatible.`}</p>\n      <p><em parentName=\"p\">{`Code for this Note, can be found `}<a parentName=\"em\" {...{\n            \"href\": \"https://github.com/Shub1427/rustschool/blob/master/gui/gfx-rs/src/001-show_window/main.rs\"\n          }}>{`here`}</a>{`\nParts of the code would be referenced here, to make things clear.`}</em></p>\n      <h2>{`Vulkan Instance and Surface`}</h2>\n      <Image alt=\"Vulkan Flow Image\" src=\"https://user-images.githubusercontent.com/11786283/77244041-e4bf5680-6c36-11ea-96a1-2be7bd71ccbd.png\" placeholder=\"https://user-images.githubusercontent.com/11786283/80305144-bce48500-87d8-11ea-9832-4baaaf8ce41f.png\" mdxType=\"Image\" />\n      <p>{`This Tutorial is inspired from `}<a parentName=\"p\" {...{\n          \"href\": \"https://vulkan.lunarg.com/doc/sdk/1.2.131.2/linux/tutorial/html/index.html\"\n        }}>{`LunarG Vulkan Tutorial`}</a>{`,\nwhich is written in `}<inlineCode parentName=\"p\">{`C++`}</inlineCode>{`. I am trying to learn `}<inlineCode parentName=\"p\">{`Rust`}</inlineCode>{` and converting that tutorial into `}<inlineCode parentName=\"p\">{`Rust`}</inlineCode>{`,\nusing `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` library, which is a wrapper over Vulkan Specs.`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Application: is what we will build using `}<inlineCode parentName=\"li\">{`gfx-hal`}</inlineCode></li>\n        <li parentName=\"ul\">{`Loader: here refers to `}<inlineCode parentName=\"li\">{`gfx-hal`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`gfx-backend-vulkan`}</inlineCode>{` libraries. An isntance of\n`}<inlineCode parentName=\"li\">{`gfx-backend-vulkan`}</inlineCode>{` inititalizes a Loader. Creating an instance, intializes the loader.`}</li>\n        <li parentName=\"ul\">{`Layers: is something advanced, and am not sure when or if I will talk about it at-all.`}</li>\n      </ul>\n      <h2>{`Backend`}</h2>\n      <Image alt=\"GFX Hal Backends\" src=\"https://user-images.githubusercontent.com/11786283/77244047-03255200-6c37-11ea-885d-2d8b981bb8a8.png\" placeholder=\"https://user-images.githubusercontent.com/11786283/80305177-eb626000-87d8-11ea-9d40-0a632affdd2f.png\" mdxType=\"Image\" />\n      <p>{`Backends are specific to what GPU u have and what specs it supports.`}</p>\n      <p>{`Vulkan Backend is cross-compatible and has support in Linux/Windows, on AMD, Intel, NVidia etc.`}</p>\n      <blockquote>\n        <p parentName=\"blockquote\">{`Apple stays out, and I hate this thing about it, it doesn't support Vulkan, and has specific\ngraphics backend called `}<inlineCode parentName=\"p\">{`Metal`}</inlineCode>{`. Though `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` has `}<inlineCode parentName=\"p\">{`metal`}</inlineCode>{` backend as well and since I am using\nMac (Yeah! Now don't come and bash me, can't use my Linux system a.t.m.), it would be a good\nway to know the support of `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` for MacOS as well.`}</p>\n      </blockquote>\n      <br />\n      <br />\n      <p><strong parentName=\"p\"><em parentName=\"strong\">{`Moving forward`}</em></strong>{`, we now need to import various `}<inlineCode parentName=\"p\">{`backends`}</inlineCode>{` in our code to have cross-compatibility.\n`}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` needs an instance of a specific Backend which can be controlled\nusing Rust Feature Configurations.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`#[cfg(feature = \"dx12\")]\nuse gfx_backend_dx12 as back;\n#[cfg(feature = \"metal\")]\nuse gfx_backend_metal as back;\n#[cfg(feature = \"vulkan\")]\nuse gfx_backend_vulkan as back;\n`}</code></pre>\n      <hr></hr>\n      <blockquote>\n        <p parentName=\"blockquote\">{`From here on, we will deep dive into Rust Programming. By the time we are done coding, we would be\nable to show a blank window on our Monitors.`}</p>\n      </blockquote>\n      <h2>{`Define Backend Struct:`}</h2>\n      <p>{`I am trying to keep my code, matching to how people write for real life projects. Thus, we won't be\njust writing down lines of code all inside `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` function, instead we will try to manage our code,\nas much as we can from the beginning (not overdoing to much).`}</p>\n      <p>{`So first thing we need is to manage Window Instance and Vulkan Backend Surface Objects (what these things\nare, is defined in next sections).`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`struct BackendState<B: Backend> {\n    // Vulkan backend instance object\n    instance: Option<B::Instance>,\n    // Vulkan backend surface object\n    surface: ManuallyDrop<B::Surface>,\n    // \\`winit\\` Window object.\n    window: window::Window,\n}\n\nimpl<B: Backend> Drop for BackendState<B> {\n    fn drop(&mut self) {\n        if let Some(instance) = &self.instance {\n            unsafe {\n                let surface = ManuallyDrop::into_inner(ptr::read(&self.surface));\n                instance.destroy_surface(surface);\n            }\n        }\n    }\n}\n`}</code></pre>\n      <p>{`Since `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{` does not manage every peace of Memory, we need to define the Vulkan `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{`\nas manually managed, using `}<inlineCode parentName=\"p\">{`ManuallyDrop`}</inlineCode>{` struc. Also, we need to drop `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{` once done with it,\ni.e. when `}<inlineCode parentName=\"p\">{`BackendState`}</inlineCode>{` struct gets dropped.`}</p>\n      <h2>{`Creating OS Window`}</h2>\n      <p>{`Now let's come back to our code. In real world, to draw\nanything we need a canvas, right. Similarly, in\nComputer Graphics to draw anything, we need an OS Window.\nLater we will be binding this OS Window with GPU `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{`\ninstance that will do the actual drawing. Creating an OS Window\nin Rust is done using `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{` library, which again is\ncross-platform. It requires two major steps to display a blank window:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Window Dimensions`}</li>\n        <li parentName=\"ul\">{`Event Loop, that will help us to know when to redraw, w.r.t\nCPU and GPU capabilities (since we are working with Vulkan,\nit's all GPU capabilities), and listen to user events.`}</li>\n      </ul>\n      <Blockquote type=\"warn\" mdxType=\"Blockquote\">\n  How or When re-renders happen, is all very low level details,\n  which I don't have much context on right now.\n      </Blockquote>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`const APP_NAME: &'static str = \"Show Window\";\nconst WINDOW_SIZE: [u32; 2] = [1024, 768];\n...\n// main function will start instantiation of static instances.\nfn main() {\n  ...\n  let ev_loop = event_loop::EventLoop::new();\n  let (window_builder, extent) = build_window(&ev_loop);\n  ...\n}\n`}</code></pre>\n      <p>{`where, `}<inlineCode parentName=\"p\">{`build_window()`}</inlineCode>{` is doing the main job, of instatiating\nthe main OS window, with some logical window size, scaled to\nmatch the actual physical size.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`fn build_window(\n    ev_loop: &event_loop::EventLoop<()>\n) -> (window::WindowBuilder, hal_window::Extent2D) {\n    // We need to first get Logical and Physical Size of the screen\n    let (logical_window_size, physical_window_size) = {\n        let dpi = ev_loop.primary_monitor().scale_factor();\n        let logical: LogicalSize<u32> = WINDOW_SIZE.into();\n        let physical: PhysicalSize<u32> = logical.to_physical(dpi);\n\n        (logical, physical)\n    };\n\n    let window_builder = window::WindowBuilder::new()\n        .with_title(APP_NAME)\n        .with_inner_size(logical_window_size)\n        .with_title(\"colour-uniform\".to_string());\n\n    (\n        window_builder,\n        hal_window::Extent2D {\n            width: physical_window_size.width,\n            height: physical_window_size.height,\n        },\n    )\n}\n`}</code></pre>\n      <p>{`Everything in the above code is quite simple and\nself-explanatory. The only thing that is confusing is, why\ndo we have two device sizes. Best explanation can be found\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.rs/winit/0.22.1/winit/dpi/index.html\"\n        }}>{`here in `}<inlineCode parentName=\"a\">{`winit`}</inlineCode>{` docs`}</a>{`, but in short they are just two different size\ninstances. One (the `}<inlineCode parentName=\"p\">{`LogicalSize`}</inlineCode>{`) is Human understandable,\ni.e., what you ask for is what you get. The other one\n(`}<inlineCode parentName=\"p\">{`PhysicalDevice`}</inlineCode>{`) is something specific to OS and hardware,\nwhere each Computer System might have a different Screen\ndisplay ratio (also known as DPI), defining how a 720 sized\nLogical window we defined will actually be presented on real\nScreen, calculating the pixel ratio per inch and stuff.`}</p>\n      <blockquote>\n        <p parentName=\"blockquote\">{`We still haven't built our `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{` Window, yet. We have just\ninstantiated `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{`'s WindowBuilder, which uses Builder\nPattern to generate `}<inlineCode parentName=\"p\">{`Window`}</inlineCode>{`, once `}<inlineCode parentName=\"p\">{`build`}</inlineCode>{` method is called.`}</p>\n      </blockquote>\n      <h2>{`Instance & Surface (Instantiating our `}<inlineCode parentName=\"h2\">{`BackendState`}</inlineCode>{`)`}</h2>\n      <p>{`Vulkan instance is the starting point to work with Vulkan.\nA Vulkan instance actually takes the name of Application,\nand provides us with various APIs, specially to\n`}<inlineCode parentName=\"p\">{`enumerate_devices`}</inlineCode>{`.`}</p>\n      <p>{`We will start by wrapping all these instantiations into one\nfunction call.`}</p>\n      <Diff lang=\"rs\" addedLineNumbers={[6]} removedLineNumbers={[]} hideLines mdxType=\"Diff\">{`// main.rs\n...\nfn main() {\n  ...\n  let (window_builder, extent) = build_window(&ev_loop, \"Show Window\".into());\n  let backend = create_backend(window_builder, &ev_loop, extent);\n  ...\n}\n`}</Diff>\n      <p>{`We first need to get our `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`Window`}</inlineCode>{` instance, that we\nleft to do in last section, then we will move forward in\ngenerating `}<inlineCode parentName=\"p\">{`gfx_hal`}</inlineCode>{`'s backend `}<inlineCode parentName=\"p\">{`instance`}</inlineCode>{` and using that\n`}<inlineCode parentName=\"p\">{`instance`}</inlineCode>{` we will derive our `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`devices`}</inlineCode>{`,\nused to draw on window and get GPU details, respectively.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`fn create_backend(\n    wb: window::WindowBuilder,\n    ev_loop: &event_loop::EventLoop<()>,\n    extent: hal_window::Extent2D\n) -> BackendState<back::Backend> {\n    let window = wb.build(ev_loop).unwrap();\n\n    let instance = back::Instance::create(APP_NAME, 1)\n        .expect(\"Failed to create an instance!\");\n    let surface = unsafe {\n        instance\n            .create_surface(&window)\n            .expect(\"Failed to create a surface!\")\n    };\n\n    BackendState {\n        instance: Some(instance),\n        surface: ManuallyDrop::new(surface),\n        window,\n    }\n}\n`}</code></pre>\n      <blockquote>\n        <p parentName=\"blockquote\">{`We will discuss about `}<inlineCode parentName=\"p\">{`extent`}</inlineCode>{` in other sections,\nwhen we will start working with GPU device instances, i.e.\nwhen we will work with `}<inlineCode parentName=\"p\">{`adapters`}</inlineCode>{`.`}</p>\n      </blockquote>\n      <p>{`First thing to note, we need to create `}<inlineCode parentName=\"p\">{`window`}</inlineCode>{` instance, which\nis nothing but `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{`'s Window instance, built by the\n`}<inlineCode parentName=\"p\">{`WindowBuilder`}</inlineCode>{` we instantiated earlier. This instance will\nbe used by `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{` to bind them together.`}</p>\n      <p><inlineCode parentName=\"p\">{`instance`}</inlineCode>{` is created directly from static functions from\n`}<strong parentName=\"p\"><em parentName=\"strong\">{`gfx_hal`}</em></strong>{` `}<inlineCode parentName=\"p\">{`Instance`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`create`}</inlineCode>{` function takes an `}<em parentName=\"p\">{`APP_NAME`}</em>{`\nand a `}<em parentName=\"p\">{`VERSION`}</em>{` number for the app, whose functionality is\ncurrently unknown to me.`}</p>\n      <p><inlineCode parentName=\"p\">{`instance`}</inlineCode>{` is used to create `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{`. Vulkan requires a\ncanvas or `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{` to draw things into and a `}<inlineCode parentName=\"p\">{`surface`}</inlineCode>{` can\nonly exist inside a OS App Window. Usually we use a 3rd-party\nmodule to create OS specific Window instances,\nlike created one from `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{`.`}</p>\n      <Blockquote type=\"warn\" mdxType=\"Blockquote\">\n  Many stuff here has not been described in detail. We will\n  bw discussing and explaining stuff in more detail later,\n  or update this Doc again later, when I gain more\n  knowledge.\n      </Blockquote>\n      <h2>{`Bonus Round (Event Loop)`}</h2>\n      <p>{`Ok! We have already created `}<inlineCode parentName=\"p\">{`ev_loop`}</inlineCode>{` instance for `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{`,\nbut we haven't really discussed about it properly. As the\nname suggests, it is the core of `}<inlineCode parentName=\"p\">{`winit`}</inlineCode>{`, used for starting the\nApp and listening to User Events.\nWe will discuss on Event Handling done inside the `}<inlineCode parentName=\"p\">{`run`}</inlineCode>{` loop,\nwhere we pass a `}<a parentName=\"p\" {...{\n          \"href\": \"https://doc.rust-lang.org/book/ch13-01-closures.html\"\n        }}>{`Closure`}</a>{`, which will handle various user events,\nlike `}<em parentName=\"p\">{`Keyboard`}</em>{`, `}<em parentName=\"p\">{`Joystick`}</em>{`, `}<em parentName=\"p\">{`Mouse`}</em>{` events etc.`}</p>\n      <Blockquote type=\"warn\" mdxType=\"Blockquote\">\n  Do remember that a <Link href=\"https://doc.rust-lang.org/book/ch13-01-closures.html\" target=\"_blank\" rel=\"noopener noreferrer\" mdxType=\"Link\">Closure</Link>&nbsp;\n  will completely get the ownership\n  of any variables that are passed to it.\n        <p>{`  Even the `}<inlineCode parentName=\"p\">{`ev_loop`}</inlineCode>{` instance we created, will lose it's\nownership after `}<inlineCode parentName=\"p\">{`ev_loop.run`}</inlineCode>{` call. This is the reason\neverything we have done till now is done inside `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{`\nfunction to keep instance ownerships temporary.`}</p>\n      </Blockquote>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`fn main() {\n    // Previous instantiations, before starting the\n    // event_loop\n    ...\n    ev_loop.run(move |event, _, control_flow| {\n        *control_flow = event_loop::ControlFlow::Wait;\n        match event {\n            event::Event::WindowEvent { event, .. } =>\n            {\n                #[allow(unused_variables)]\n                match event {\n                    event::WindowEvent::CloseRequested => {\n                        *control_flow = event_loop::ControlFlow::Exit\n                    }\n                    event::WindowEvent::Resized(dims) => {\n                        debug!(\"RESIZE EVENT\");\n                    }\n                    event::WindowEvent::ScaleFactorChanged { new_inner_size, .. } => {\n                        // Will get called whenever the screen scale factor (DPI) changes,\n                        // like when user move the Window from one less DPI monitor\n                        // to other high scaled DPI Monitor.\n                        debug!(\"Scale Factor Change\");\n                    }\n                    _ => (),\n                }\n            }\n            event::Event::MainEventsCleared => {\n                debug!(\"MainEventsCleared\");\n                backend.window.request_redraw();\n            },\n            event::Event::RedrawRequested(_) => {\n                debug!(\"RedrawRequested\");\n            },\n            event::Event::RedrawEventsCleared => {\n                debug!(\"RedrawEventsCleared\");\n            }\n            _ => (),\n        }\n    });\n    ...\n}\n`}</code></pre>\n      <p>{`First things first, `}<inlineCode parentName=\"p\">{`ev_loop.run(|| => {})`}</inlineCode>{` starts our event\nloop, that actually takes a `}<a parentName=\"p\" {...{\n          \"href\": \"https://doc.rust-lang.org/book/ch13-01-closures.html\"\n        }}>{`closure`}</a>{`,\nthus we need to be a bit careful in using it. This was one of the reasons\nwe instantiated everything inside main. Later on we will\ndo things inside `}<inlineCode parentName=\"p\">{`struct`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`impl`}</inlineCode>{`s, but in this section, we have\nsone most of the work inside `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{`.`}</p>\n      <p>{`Details on event listeners:`}</p>\n      <ul>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`CloseRequested`}</inlineCode>{` is used for listening close button click.\nWithout this our Window won't Shutdown gracefully, we would\nhad to `}<inlineCode parentName=\"li\">{`SIGKILL`}</inlineCode>{` our app. We can also listen to Key presses, like `}<inlineCode parentName=\"li\">{`ESC`}</inlineCode>{`\nto close the window, but we will cover that later.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Resized`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`ScaleFactorChanged`}</inlineCode>{` are called when window is resized and\nwhen window's DPI changes (like when we move our window from a low DPI\nMonitor to High DPI) respectively.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`MainEventsCleared`}</inlineCode>{`: If you are from `}<strong parentName=\"li\">{`Android`}</strong>{` background\nit resembles the `}<inlineCode parentName=\"li\">{`onMeasure`}</inlineCode>{` call, or if from `}<strong parentName=\"li\">{`ReactJS`}</strong>{`\nworld it resembles the `}<inlineCode parentName=\"li\">{`shouldComponentUpdate`}</inlineCode>{` call. What I\nmean is, this event is called just before any redraw,\nand can be used to do calculations before drawing on window.\nAlso keep a note that if you want to redraw you need\nto call this `}<inlineCode parentName=\"li\">{`window.request_redraw()`}</inlineCode>{`, like we `}<inlineCode parentName=\"li\">{`return true`}</inlineCode>{`\nfrom `}<inlineCode parentName=\"li\">{`shouldComponentUpdate`}</inlineCode>{` to do a `}<inlineCode parentName=\"li\">{`render`}</inlineCode>{`.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RedrawRequested`}</inlineCode>{`: this resembles `}<strong parentName=\"li\">{`Android's`}</strong>{` `}<inlineCode parentName=\"li\">{`onDraw`}</inlineCode>{`\ncall and in `}<strong parentName=\"li\">{`ReactJS`}</strong>{` resembles `}<inlineCode parentName=\"li\">{`render`}</inlineCode>{` call. That means\nthis call is the place where we will have to handle all our\ncanvas drawings, in `}<inlineCode parentName=\"li\">{`gfx_hal`}</inlineCode>{` all our `}<inlineCode parentName=\"li\">{`surface`}</inlineCode>{` drawings.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RedrawEventsCleared`}</inlineCode>{`: this resembles `}<strong parentName=\"li\">{`ReactJS`}</strong>\n          <inlineCode parentName=\"li\">{`componentDidUpdate`}</inlineCode>{` call, as this event gets triggered on\neach change after a redraw has happened. One thing to note,\n`}<em parentName=\"li\">{`if there are no `}<inlineCode parentName=\"em\">{`RedrawRequested`}</inlineCode>{` events, it is emitted`}</em>\n          <em parentName=\"li\">{`immediately after `}<inlineCode parentName=\"em\">{`MainEventsCleared`}</inlineCode>{`.`}</em></li>\n      </ul>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-log\"\n        }}>{`2020-05-11T06:59:42.987942+05:30 DEBUG show_window - MainEventsCleared\n2020-05-11T06:59:42.988007+05:30 DEBUG show_window - RedrawRequested\n2020-05-11T06:59:42.988033+05:30 DEBUG show_window - RedrawEventsCleared\n`}</code></pre>\n      <hr></hr>\n    </PolkaContainer>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAGA;AAFA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsawsourceRoot":""}