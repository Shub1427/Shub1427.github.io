{"version":3,"file":"static/webpack/static/development/pages/gfx-hal-initials/rust-cargo-basics.js.915885000231cdea1b11.hot-update.js","sources":["webpack:///./pages/gfx-hal-initials/rust-cargo-basics.md"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst PolkaContainer = makeShortcode(\"PolkaContainer\");\nconst Blockquote = makeShortcode(\"Blockquote\");\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <PolkaContainer mdxType=\"PolkaContainer\">\n      <h1>{`Basics on Rust & Cargo`}</h1>\n      <h2>{`Rust`}</h2>\n      <Blockquote type=\"warn\" mdxType=\"Blockquote\">\nI am a very beginner in Rust and Low Level Programming, and parts of my research\nmight be falsy or wrong (as I forget things very soon, due to me trying new things most often).\nDon't take everything I write here, as the only source of truth. Please do verify my writings here\nfrom different sources. If found falsy, please do let me know by&nbsp;\n        <Link target=\"_blank\" href=\"https://github.com/Shub1427/shub1427.github.io/issues/new/choose\" mdxType=\"Link\">raising an issue here</Link>.\n      </Blockquote>\n      <br />\n      <p>{`Anyways, keeping aside the above talk, I am trying my best to improve these notes. If anything\nI find misleading, I will update in later revisions of this site. Mostly I will write only those\nthings, which I have worked with and faced some issues before.`}</p>\n      <br />\n      <p>{`Hope this helps you as well.`}</p>\n      <h3>{`Some basics on Lifetimes:`}</h3>\n      <p>{`Every reference in global context in `}<inlineCode parentName=\"p\">{`rust`}</inlineCode>{` has a lifetime\nof `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{`, and by default we don't have to assign a specifc\nlifetime to variables or global function args etc. `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{`\nlifetime defines that, that particular entity will live long enough,\ntill the main process dies. So, following:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`const foobar: &str = \"Up here I have static lifetime\";\n\nfn foo(param1: &str) {\n  println!(\"I am static: {}\", param1);\n}\n\nfn main() {\n  let bar = &foobar;\n  println!(\"I am static as well: {}\", bar);\n}\n`}</code></pre>\n      <p>{`would result into something like this:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`const foobar: &'static str = \"Up here I have static lifetime\";\n\nfn foo(param1: &'static str) {\n  println!(\"I am static: {}\", param1);\n}\n\nfn main() {\n  let bar = &'static foobar;\n  println!(\"I am static as well: {}\", bar);\n}\n`}</code></pre>\n      <h3>{`Passing Slices as arguments:`}</h3>\n      <p>{`If details of the type is not essential, passing array like variables as a reference\nof generic slice is beneficial. For eg.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`use std::fmt::Debug;\n\nfn check_array<T>(data: &[T])\nwhere\n  T: Debug,\n{\n  let mut i = 0;\n  for item in data.iter() {\n    println!(\"Element[{}]: {:?}\", i, item);\n    i += 1;\n  }\n}\nfn check_str(data: &str) {\n  let mut i = 0;\n  for item in data.chars() {\n    println!(\"Element[{}]: {:?}\", i, item);\n    i += 1;\n  }\n}\n\nfn main() {\n    let mut v = vec![1, 2, 3, 4];\n    let mut s = String::from(\"Test FOO\");\n    check_array(&v);\n    check_str(&s);\n}\n`}</code></pre>\n      <p>{`where, `}<inlineCode parentName=\"p\">{`&str`}</inlineCode>{` is a string slice, which means I could've passed part of the string as well,\nistead of the whole `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{` data, as `}<inlineCode parentName=\"p\">{`check_str(&s[2..6])`}</inlineCode>{`.`}</p>\n      <h3>{`How to drop struct properties manually.`}</h3>\n      <p>{`By default, managing memory is not required in Rust. But, there are cases, when this becomes\ncrucial, and Rust allows you to mess with memory when needed (still being safe).`}</p>\n      <p>{`For cases where we need to drop properties manually, there are many ways in Rust to do so.\nTwo of which are:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`To use `}<inlineCode parentName=\"li\">{`Option`}</inlineCode></li>\n        <li parentName=\"ul\">{`To use `}<inlineCode parentName=\"li\">{`ManuallyDrop`}</inlineCode></li>\n      </ul>\n      <p><strong parentName=\"p\">{`Example of using `}<inlineCode parentName=\"strong\">{`Option`}</inlineCode>{` to drop properties.`}</strong></p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`struct Foo {\n  baz: String;\n  bar: Option<String>;\n}\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        self.bar = None;\n    }\n}\n`}</code></pre>\n      <p>{`Above code drops `}<inlineCode parentName=\"p\">{`bar`}</inlineCode>{` before `}<inlineCode parentName=\"p\">{`baz`}</inlineCode>{`, which is different than the default behaviour of Rust,\nwhere Struct properties are dropped in the order they were defined, i.e. for above code `}<inlineCode parentName=\"p\">{`baz`}</inlineCode>{`\nshould have been dropped before `}<inlineCode parentName=\"p\">{`bar`}</inlineCode>{`.`}</p>\n      <br />\n      <p><strong parentName=\"p\">{`Example of using `}<inlineCode parentName=\"strong\">{`ManuallyDrop`}</inlineCode>{` to drop properties.`}</strong></p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`use std::mem::ManuallyDrop;\n\nstruct Foo {\n  baz: String;\n  bar: ManuallyDrop<String>;\n}\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        ManuallyDrop::drop(&mut self.bar);\n    }\n}\n`}</code></pre>\n      <p>{`Above code does the same thing as was done using `}<inlineCode parentName=\"p\">{`Option`}</inlineCode>{` before.`}</p>\n      <h2>{`Cargo`}</h2>\n      <p>{`Basics of `}<inlineCode parentName=\"p\">{`cargo`}</inlineCode>{` is very simple, and thus I like Rust the most, compared to `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{`.\nI won't be writing on how to `}<inlineCode parentName=\"p\">{`run`}</inlineCode>{` or create a `}<inlineCode parentName=\"p\">{`new`}</inlineCode>{` project, but would like to\ntalk on some cargo features, which are not known if a beginner skip the Cargo Chapter\nin Rust Book.`}</p>\n      <h3>{`Cargo Features`}</h3>\n      <p><inlineCode parentName=\"p\">{`features`}</inlineCode>{` is a wornderful option provided by Rust Cargo, which makes compiling your code\nconditionally. For Eg, If we want specific features to be enabled only for Linux, we\ncan do so easily using `}<inlineCode parentName=\"p\">{`features`}</inlineCode>{` option.`}</p>\n      <br />\n      <p>{`For eg, In our journey of learning `}<inlineCode parentName=\"p\">{`gfx-hal`}</inlineCode>{`, we would be using multiple Graphics Backends,\nwhich should be compiled respective to which OS Platform we are working on. This is made possible\nby defining `}<inlineCode parentName=\"p\">{`features`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`Cargo.toml`}</inlineCode>{` file, and later when running the Project in dev mode\n`}<inlineCode parentName=\"p\">{`cargo run`}</inlineCode>{`, we would pass the feature we need to be used for the platform.`}</p>\n      <br />\n      <p><strong parentName=\"p\">{`Example `}<inlineCode parentName=\"strong\">{`Cargo.toml`}</inlineCode></strong></p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-toml\"\n        }}>{`[features]\ndefault = []\nmetal = [\"gfx-backend-metal\"]\ndx12 = [\"gfx-backend-dx12\"]\nvulkan = [\"gfx-backend-vulkan\"]\n\n[dependencies.gfx-backend-vulkan]\nversion = \"0.5.0\"\nfeatures = [\"x11\"]\noptional = true\n\n[target.'cfg(target_os = \"macos\")'.dependencies.gfx-backend-metal]\nversion = \"0.5.0\"\noptional = true\n\n[target.'cfg(windows)'.dependencies.gfx-backend-dx12]\nversion = \"0.5.0\"\noptional = true\n`}</code></pre>\n      <p>{`Once above is done, we can now use feature-toggles in our code, to remove part of code\nthat does not satisfy the `}<inlineCode parentName=\"p\">{`feature`}</inlineCode>{`. For Eg,`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-rs\"\n        }}>{`#[cfg(feature = \"dx12\")]\nuse gfx_backend_dx12 as back;\n#[cfg(feature = \"metal\")]\nuse gfx_backend_metal as back;\n#[cfg(feature = \"vulkan\")]\nuse gfx_backend_vulkan as back;\n`}</code></pre>\n      <p>{`And not the final part to run the code with features enabled.`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-sh.false\"\n        }}>{`cargo run --features metal\n`}</code></pre>\n      <p>{`Above code runs our code, enabling the `}<inlineCode parentName=\"p\">{`metal`}</inlineCode>{` feature-toggle, which compiles our\ncode for MacOS Platform. We can also pass more features in one go, if they are supported\nduring compilation, with comma separated values.`}</p>\n    </PolkaContainer>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAFA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;;;;A","sourceRoot":""}