{"version":3,"file":"static/webpack/static/development/pages/_app.js.5b459df59c89f40b2dc8.hot-update.js","sources":["webpack:///./hoc/palette-mode.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { useLocalStorage } from 'hooks/use-local-storage';\n\ninterface IContextProps {\n  darkMode: boolean;\n  setDarkMode(darkMode: boolean): void;\n}\n\nconst value = window.localStorage.getItem('darkMode');\n\nconst PaletteModeContext = React.createContext<IContextProps>({\n  darkMode: value ? JSON.parse(value) : false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setDarkMode: () => {},\n});\n\ninterface IPaletteModeProps {\n  children?: React.ReactNode;\n}\n\nconst PaletteModeProvider: React.FC<IPaletteModeProps> = ({ children }) => {\n  const [darkMode, setDarkMode] = useLocalStorage('darkMode', false);\n  return (\n    <PaletteModeContext.Provider\n      value={{\n        darkMode,\n        setDarkMode,\n      }}\n    >\n      {children}\n    </PaletteModeContext.Provider>\n  );\n};\n\nexport const usePaletteModeStore = () => useContext(PaletteModeContext);\n\nexport function withPaletteModeProvider(Component: any) {\n  return function PaletteModeWrapperComponent(props: any) {\n    return (\n      <PaletteModeProvider>\n        <Component {...props} />\n      </PaletteModeProvider>\n    );\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAHA;AACA;AASA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;;A","sourceRoot":""}