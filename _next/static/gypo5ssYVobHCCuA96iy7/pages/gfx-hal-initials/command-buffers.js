(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"7ljp":function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var a=n("q1tI"),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),u=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"===typeof e?e(t):c({},t,{},e)),n},d=function(e){var t=u(e.components);return(o.a.createElement(l.Provider,{value:t},e.children))},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||r;return n?o.a.createElement(f,c({ref:t},l,{components:n})):o.a.createElement(f,c({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var r=n.length,i=new Array(r);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[m]="string"===typeof e?e:a,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},"80H9":function(e,t,n){"use strict";n.r(t),n.d(t,"record",(function(){return u})),n.d(t,"clientUploadRecord",(function(){return d})),n.d(t,"default",(function(){return O}));var a=n("wx14"),o=n("Ff2n"),r=n("q1tI"),i=n.n(r),c=n("7ljp"),s=n("zAA7"),l=n("k333"),u=(i.a.createElement,s.a["command-buffers"]),d=l.b["upload-client-logs"],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(c.b)("div",t)}},p=m("PolkaContainer"),f=m("H1"),b=m("Image"),h=m("Link"),g=m("Blockquote"),w={record:u},y="wrapper";function O(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.b)(y,Object(a.a)({},w,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)(p,{pageTitle:u.title,pageDescription:u.description,keywords:["Vulkan","Basics","Fundamental","Beginner","Physical Device","Logical Device","gfx-hal"],publishDate:u.createdAt,ogImage:u.ogImage,mdxType:"PolkaContainer"},Object(c.b)(f,{updatedAt:u.updatedAt,mdxType:"H1"},"T-","".concat(s.b-4),": ",u.title),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"This doc is mostly theoretical, where\npractical examples mentioned in this docs might not be functional.\nSo bear with me and try to grasp the theory as much as you can,\nas it will help in later tutorials, when we will actually re-use this\nknowledge to create a functional example.")),Object(c.b)("br",null),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Following diagram is a very high-level illustration of what"),"\n",Object(c.b)("em",{parentName:"p"},"Command Buffers and Command Pools are:")),Object(c.b)(b,{alt:"Flow of Command Buffer from Command Pool",src:"https://user-images.githubusercontent.com/11786283/77256537-ff281d00-6c94-11ea-8e05-d49d8a24aaab.png",placeholder:"https://user-images.githubusercontent.com/11786283/82124868-93a78b00-97bf-11ea-9773-3a66b1f1f096.png",mdxType:"Image"}),Object(c.b)("br",null),Object(c.b)("h2",null,"Command Buffer"),Object(c.b)("p",null,"Command Buffers can be thought of as a place to record\nset of execution commands (pushed to a buffer),\nand then later release those recorded commands\nto Device Queue to get executed by GPU."),Object(c.b)("p",null,"It's kind of ",Object(c.b)("em",{parentName:"p"},"SQL transactions"),", where a Command Buffer acts\nas a collection of instructions inside a transaction,\nand when the transaction is committed, they all get\nprocessed (in one go or chunks, is decided by Command Pool)."),Object(c.b)("p",null,"If you have read my","\xa0",Object(c.b)(h,{href:d.link,mdxType:"Link"},"Client Log Upload Blog"),",\nthen you can get the importance of buffering too frequent\nevents. Buffering is mainly used to defer the work load from\nCPU/GPU. Up here Command Buffers are doing the same thing."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"For Eg."),", Let's say we want to process 500 instructions\nin a second, but our GPU can only handle 50 instructions\na second, buffering will help deferring that work load,\nand do it in chunks of instructions. This increases\nperformance, also giving more control to developer on\nhow to manage too heavy tasks in a queue."),Object(c.b)("p",null,"One more benefit of Command Buffers is that they can\nbe multiple and can be recorded in parallel. Thus\nincrease any application's concurrency."),Object(c.b)("h2",null,"Command Pool"),Object(c.b)("p",null,"If there are too many instructions to process from\nCommand Buffer, dividing them into chunks and submitting\nthem to CPU/GPU to process, can become costly."),Object(c.b)("p",null,"To handle such situations, Vulkan has separated the\nstorage of commands (Command Buffer) and execution of\ncommands (Command Pool). Command Buffers are pre-registered\nin Command Pool, and once the Command Buffer flushes it's\nrecorded instructions, Command Pool takes care of the\nexecution of the Commands, depending on the state of\nGPU."),Object(c.b)("p",null,"Command Pool is derived from Logical Device instance. They\nare not manually created, instead we ask the Logical Device to provide us the Command Pool."),Object(c.b)("p",null,"Using the Command Pool, we then get Command Buffer\n(one or many depends), or re-use the already fetched\nCommand Buffer from the pool."),Object(c.b)("h2",null,"Primary vs Secondary Command Buffers"),Object(c.b)(g,{type:"warn",mdxType:"Blockquote"},"This section could be too much info, so just read it and if you fail to understand, try understanding Render Passes first. Point is, many things in Vulkan is correlated, thus understanding just one concept is not enough."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},Object(c.b)("em",{parentName:"p"},"Quoting directly from ",Object(c.b)("a",Object(a.a)({parentName:"em"},{href:"https://vulkan-tutorial.com/Drawing_a_triangle/Drawing/Command_buffers"}),"Vulkan Tutorial"))),Object(c.b)("ul",{parentName:"blockquote"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"PRIMARY"),": Can be submitted to a queue for execution,\nbut cannot be called from other command buffers."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"SECONDARY"),": Cannot be submitted directly, but\ncan be called from primary command buffers."))),Object(c.b)("p",null,"To understand this the above quote, we can take an example.\nLet's say, we have 500 commands to execute, where GPU\ncan take only 5 at a time. Since, Primary Command buffers\ncan be registered to a render pass, one at a time, doing\nparallelism is difficult with single Primary CB. For\nsuch cases, Secondary CB is introduced, which cannot\ndirectly interact with Render Pass execution, but can\nexecute commands passed to it in Primary CB, which then\npasses those committed commands to\nRender Pass. Currently, even I am having hard time\nunderstanding it, but I am sure once we start building\napplications, these things will get more clear."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"You can get a detailed explanation in the following\nYoutube Video,\n",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.youtube.com/watch?v=X8Ob_b3ANzs&t=990s"}),"Command Buffers & Pipelines"))),Object(c.b)("h2",null,"Code Sample"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Let's now understand all this from a code sample")),Object(c.b)("p",null,"We need a new ",Object(c.b)("inlineCode",{parentName:"p"},"struct")," to manage resources related to Frame Buffers and\nMutex and Locks. ",Object(c.b)("inlineCode",{parentName:"p"},"FrameBufferState")," would create and manage them."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rs"}),'struct FrameBufferState<B: Backend> {\n    command_pool: Option<B::CommandPool>,\n    command_buffer: B::CommandBuffer,\n}\n\nimpl<B: Backend> FrameBufferState<B> {\n    fn new(deviceState: &DeviceState<B>) -> Self {\n        let (command_pool, mut command_buffer) = unsafe {\n            let mut command_pool = deviceState\n                .device\n                .create_command_pool(deviceState.queues.family, CommandPoolCreateFlags::empty())\n                .expect("Out of memory");\n\n            let command_buffer = command_pool.allocate_one(command::Level::Primary);\n\n            (command_pool, command_buffer)\n        };\n        Self {\n            command_pool: Some(command_pool),\n            command_buffer,\n        }\n    }\n}\n')),Object(c.b)("p",null,"In the above code, we are getting two things, Command\nPool and Command Buffer."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"command_pool")," is created once, using logical ",Object(c.b)("inlineCode",{parentName:"p"},"device"),".\n",Object(c.b)("inlineCode",{parentName:"p"},"create_command_pool")," is the api which creates a command\npool, respective to what queue family that Command Pool\nwill serve to and what types commands it can process\n(like Graphics only commands or computational commands).\nLet's not worry about ",Object(c.b)("inlineCode",{parentName:"p"},"CommandPoolCreateFlags")," for now."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"command_buffer")," is fetched (allocated) from Command Pool,\nas we have already mentioned before. Here, we just need\none ",Object(c.b)("inlineCode",{parentName:"p"},"Primary")," Command Buffer, but we can create multiple\nPrimary or Secondary buffers, using ",Object(c.b)("inlineCode",{parentName:"p"},"command_pool.allocate()"),"\napi."),Object(c.b)("h2",null,"What to do now"),Object(c.b)("p",null,"With Command Buffer present, we can ",Object(c.b)("inlineCode",{parentName:"p"},"Start Recording")," on\nthe Buffer to record, all the Commands\nwe want to later execute on GPU."),Object(c.b)("p",null,"Once all the commands are recorded, ",Object(c.b)("inlineCode",{parentName:"p"},"Stop Recording"),"\nand Pass the updated Command Buffer to the Device Queue."),Object(c.b)("p",null,"We will discuss on this whole flow in later chapters."),Object(c.b)("hr",null),Object(c.b)("h2",null,"Code"),Object(c.b)("p",null,"You can find the full code for this Doc,\nhere ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Shub1427/rustschool/blob/master/gui/draw-cube/src/003-command_buffers/main.rs"}),"003-command_buffers"))))}O.isMDXComponent=!0},AXz7:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/gfx-hal-initials/command-buffers",function(){return n("80H9")}])},Ff2n:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n("zLVn");function o(e,t){if(null==e)return{};var n,o,r=Object(a.a)(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}},Q88C:function(e,t,n){"use strict";var a;n.d(t,"a",(function(){return a})),function(e){e.TUTORIAL="tutorial",e.PROJECT="project",e.RESEARCH="research",e.RUST="rust",e.JS="javascript",e.REACT="reactjs",e.GFX_HAL="gfx-hal"}(a||(a={}))},Qetd:function(e,t,n){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},k333:function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return r}));var a=n("Q88C"),o={"rust-reference":{key:"rust-reference",link:"/rust-reference",title:"Advance Rust Reference",description:"Some advance concepts in Rust that were difficult for me to understand.       This Doc is trying to keep a reference of all those topics, for me to take       a reference from later for easier understanding",ogImage:"https://user-images.githubusercontent.com/11786283/82665354-47da6300-9c51-11ea-87c7-bb996eb79de1.jpg",tags:[a.a.RUST],createdAt:new Date("2020/05/22 17:25:00"),updatedAt:new Date("2020/05/22 17:25:00"),isPublished:!0},"performance-reactjs":{key:"performance-reactjs",link:"/performance-reactjs",title:"Performance Improvements in JS and ReactJS",description:"Recent Performance related findings of mine, which I am jotting down here for later reference",ogImage:"https://user-images.githubusercontent.com/11786283/81769128-6f675800-94fa-11ea-99d6-57dc42166eaa.jpg",tags:[a.a.RESEARCH,a.a.JS,a.a.REACT],createdAt:new Date("2020/05/07 09:15:00"),updatedAt:new Date("2020/05/09 23:15:00"),isPublished:!0},"upload-client-logs":{key:"upload-client-logs",link:"/upload-client-logs",title:"Client Browser Log to your Server",description:"Sometimes (like to get details on performance) there is a requirement to log data       from end-user's browser to you own servers, for which this note will talk about.",ogImage:"https://user-images.githubusercontent.com/11786283/81769041-37601500-94fa-11ea-98f7-f353dca53e6b.jpg",tags:[a.a.PROJECT,a.a.JS,a.a.REACT],createdAt:new Date("2020/04/29 08:30:00"),updatedAt:new Date("2020/05/09 12:30:00"),isPublished:!0},"word-counter":{key:"word-counter",link:"/word-counter",title:"Word Counter in Rust",description:"Just a fun bin script for my project, to count words in my MDX files.",ogImage:"https://user-images.githubusercontent.com/11786283/81768977-fd8f0e80-94f9-11ea-8425-953f8639d80e.jpg",tags:[a.a.PROJECT,a.a.RUST],createdAt:new Date("2020/04/26 22:00:00"),updatedAt:new Date("2020/04/26 22:00:00"),isPublished:!0},"gfx-hal-basics":{key:"gfx-hal-basics",link:"/gfx-hal-initials",title:"Basics on Vulkan using gfx-hal",description:"Reference Notes for me (and others) to help get started with Rust and Vulkan",ogImage:"https://user-images.githubusercontent.com/11786283/81768708-514d2800-94f9-11ea-95d3-36796815a31f.jpg",tags:[a.a.TUTORIAL,a.a.RUST],createdAt:new Date("2020/04/26 10:00:00"),updatedAt:new Date("2020/04/26 16:00:00"),isPublished:!0},"astro-v2":{key:"astro-v2",link:"/astro-v2",title:"Astro Blaster v2 in Rust",description:"A very minimal game making tutorial in Rust using ggez",ogImage:"https://user-images.githubusercontent.com/11786283/81768159-f1a24d00-94f7-11ea-83e3-8b9212d4851c.jpg",tags:[a.a.TUTORIAL,a.a.RUST],createdAt:new Date("2020/04/10"),updatedAt:new Date("2020/04/12"),isPublished:!0}},r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){return Object.prototype.hasOwnProperty.call(e,n)&&t.push(e[n]),t}),[])}(o)},wx14:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return a}))},zAA7:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return r}));var a=n("Q88C"),o={"display-window":{key:"display-window",link:"/gfx-hal-initials/display-window",title:"Setup & Display Blank Window",description:"Learn Displaying a Blank Window using winit and bind it to gfx-hal surface instance",ogImage:"https://user-images.githubusercontent.com/11786283/82109997-98852400-9758-11ea-84a0-aa3996c67f86.jpg",tags:[a.a.RUST],createdAt:new Date("2020/04/25 17:00:00"),updatedAt:new Date("2020/05/28 23:50:00"),isPublished:!0},"physical-logical-devices":{key:"physical-logical-devices",link:"/gfx-hal-initials/physical-logical-devices",title:"Adapters & Physical/Logical Devices & Device Queues",description:"Learn to Instantiate Vulkan Physical/Logical Devices and get Device Queue from gfx-hal adapters",ogImage:"https://user-images.githubusercontent.com/11786283/82111231-485e8f80-9761-11ea-9f21-8843d4a66752.jpg",tags:[a.a.TUTORIAL,a.a.RUST,a.a.GFX_HAL],createdAt:new Date("2020/05/16 8:45:00"),updatedAt:new Date("2020/05/29 9:25:00"),isPublished:!0},"swap-chain":{key:"swap-chain",link:"/gfx-hal-initials/swap-chain",title:"SwapChain and Image Views in gfx-hal",description:"Learning about Swapchain, Double Buffering and Image Views. Understanding the implementation of SwapChain in gfx-hal",ogImage:"https://user-images.githubusercontent.com/11786283/82640938-22396380-9c29-11ea-9ee5-9a7fc01920da.jpg",tags:[a.a.TUTORIAL,a.a.RUST,a.a.GFX_HAL],createdAt:new Date("2020/05/22 10:20:00"),updatedAt:new Date("2020/05/23 14:30:00"),isPublished:!0},"command-buffers":{key:"command-buffers",link:"/gfx-hal-initials/command-buffers",title:"Command Buffers & Pool",description:"Understanding Command Pools and Command Buffers in Vulkan and gfx-hal",ogImage:"https://user-images.githubusercontent.com/11786283/82124794-f0567600-97be-11ea-9023-ea1467a6b734.jpg",tags:[a.a.TUTORIAL,a.a.RUST,a.a.GFX_HAL],createdAt:new Date("2020/05/16 21:45:00"),updatedAt:new Date("2020/05/16 21:45:00"),isPublished:!0},shaders:{key:"shaders",link:"/gfx-hal-initials/shaders",title:"Shaders",description:"Understanding Shaders & writing minimal Shader using GLSL Shading language",ogImage:"https://user-images.githubusercontent.com/11786283/82640938-22396380-9c29-11ea-9ee5-9a7fc01920da.jpg",tags:[a.a.TUTORIAL,a.a.RUST,a.a.GFX_HAL],createdAt:new Date("2020/05/23 19:30:00"),updatedAt:new Date("2020/05/23 19:35:00"),isPublished:!0}},r=Object.keys(o).length},zLVn:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return a}))}},[["AXz7",0,1]]]);